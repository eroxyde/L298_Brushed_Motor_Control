
D:\Mecatronique\Motor Control\L298_Brushed_Motor_Control\Projects\STM32F103RB-Nucleo\Templates\TrueSTUDIO\STM32F103RB_Nucleo\Debug\STM32F103RB_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001c20  08001c20  00011c20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c4c  08001c4c  00011c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08001c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  2000006c  08001cc0  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000214  08001cc0  00020214  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c0dd  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e26  00000000  00000000  0002c172  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006252  00000000  00000000  0002df98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c0  00000000  00000000  000341f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dd0  00000000  00000000  00034ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c1e  00000000  00000000  00035880  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003123  00000000  00000000  0003a49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003d5c1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001948  00000000  00000000  0003d640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c08 	.word	0x08001c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08001c08 	.word	0x08001c08

0800014c <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800014e:	4604      	mov	r4, r0
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000150:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000152:	b948      	cbnz	r0, 8000168 <BSP_LED_Init+0x1c>
 8000154:	4b0f      	ldr	r3, [pc, #60]	; (8000194 <BSP_LED_Init+0x48>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	f042 0204 	orr.w	r2, r2, #4
 800015c:	619a      	str	r2, [r3, #24]
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	f003 0304 	and.w	r3, r3, #4
 8000164:	9301      	str	r3, [sp, #4]
 8000166:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin    = LED_PIN[Led];
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull   = GPIO_NOPULL;
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000168:	4d0b      	ldr	r5, [pc, #44]	; (8000198 <BSP_LED_Init+0x4c>)
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin    = LED_PIN[Led];
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800016a:	2301      	movs	r3, #1
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin    = LED_PIN[Led];
 800016c:	2620      	movs	r6, #32
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800016e:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Pull   = GPIO_NOPULL;
 8000170:	2700      	movs	r7, #0
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8000172:	2303      	movs	r3, #3
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000174:	a902      	add	r1, sp, #8
 8000176:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin    = LED_PIN[Led];
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull   = GPIO_NOPULL;
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800017a:	9305      	str	r3, [sp, #20]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin    = LED_PIN[Led];
 800017c:	9602      	str	r6, [sp, #8]
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull   = GPIO_NOPULL;
 800017e:	9704      	str	r7, [sp, #16]
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000180:	f000 fa5e 	bl	8000640 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led],LED_PIN[Led], GPIO_PIN_RESET);
 8000184:	463a      	mov	r2, r7
 8000186:	4631      	mov	r1, r6
 8000188:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800018c:	f000 fb30 	bl	80007f0 <HAL_GPIO_WritePin>
}
 8000190:	b007      	add	sp, #28
 8000192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000194:	40021000 	.word	0x40021000
 8000198:	20000000 	.word	0x20000000

0800019c <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800019c:	4b02      	ldr	r3, [pc, #8]	; (80001a8 <BSP_LED_Toggle+0xc>)
 800019e:	2120      	movs	r1, #32
 80001a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80001a4:	f000 bb28 	b.w	80007f8 <HAL_GPIO_TogglePin>
 80001a8:	20000000 	.word	0x20000000

080001ac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001ac:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <SystemInit+0x40>)
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	f042 0201 	orr.w	r2, r2, #1
 80001b4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001b6:	6859      	ldr	r1, [r3, #4]
 80001b8:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <SystemInit+0x44>)
 80001ba:	400a      	ands	r2, r1
 80001bc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80001c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001d2:	685a      	ldr	r2, [r3, #4]
 80001d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80001d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <SystemInit+0x48>)
 80001e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000
 80001f0:	f8ff0000 	.word	0xf8ff0000
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80001fc:	f000 fe5a 	bl	8000eb4 <HAL_RCC_GetHCLKFreq>
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	fbb0 f0f3 	udiv	r0, r0, r3
 8000208:	f000 f888 	bl	800031c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800020c:	2200      	movs	r2, #0
 800020e:	4621      	mov	r1, r4
 8000210:	f04f 30ff 	mov.w	r0, #4294967295
 8000214:	f000 f842 	bl	800029c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd10      	pop	{r4, pc}

0800021c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800021e:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	f043 0310 	orr.w	r3, r3, #16
 8000228:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022a:	f000 f825 	bl	8000278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	200f      	movs	r0, #15
 8000230:	f7ff ffe2 	bl	80001f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000234:	f001 fbe2 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000240:	4a02      	ldr	r2, [pc, #8]	; (800024c <HAL_IncTick+0xc>)
 8000242:	6813      	ldr	r3, [r2, #0]
 8000244:	3301      	adds	r3, #1
 8000246:	6013      	str	r3, [r2, #0]
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000088 	.word	0x20000088

08000250 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000250:	4b01      	ldr	r3, [pc, #4]	; (8000258 <HAL_GetTick+0x8>)
 8000252:	6818      	ldr	r0, [r3, #0]
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000088 	.word	0x20000088

0800025c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800025c:	b513      	push	{r0, r1, r4, lr}
 800025e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000260:	f7ff fff6 	bl	8000250 <HAL_GetTick>
 8000264:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000266:	f7ff fff3 	bl	8000250 <HAL_GetTick>
 800026a:	9b01      	ldr	r3, [sp, #4]
 800026c:	1b00      	subs	r0, r0, r4
 800026e:	4298      	cmp	r0, r3
 8000270:	d3f9      	bcc.n	8000266 <HAL_Delay+0xa>
  {
  }
}
 8000272:	b002      	add	sp, #8
 8000274:	bd10      	pop	{r4, pc}
	...

08000278 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800027a:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800027c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800027e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000282:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000286:	041b      	lsls	r3, r3, #16
 8000288:	0c1b      	lsrs	r3, r3, #16
 800028a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800028e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000292:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000294:	60d3      	str	r3, [r2, #12]
 8000296:	4770      	bx	lr
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800029e:	b530      	push	{r4, r5, lr}
 80002a0:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002a6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002aa:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ac:	2c04      	cmp	r4, #4
 80002ae:	bf28      	it	cs
 80002b0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	2d06      	cmp	r5, #6

  return (
 80002b4:	f04f 0501 	mov.w	r5, #1
 80002b8:	fa05 f404 	lsl.w	r4, r5, r4
 80002bc:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c0:	bf8c      	ite	hi
 80002c2:	3b03      	subhi	r3, #3
 80002c4:	2300      	movls	r3, #0

  return (
 80002c6:	400c      	ands	r4, r1
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa05 f303 	lsl.w	r3, r5, r3
 80002ce:	3b01      	subs	r3, #1
 80002d0:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002d2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002d4:	ea42 0204 	orr.w	r2, r2, r4
 80002d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	bfaf      	iteee	ge
 80002de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	4b07      	ldrlt	r3, [pc, #28]	; (8000300 <HAL_NVIC_SetPriority+0x64>)
 80002e4:	f000 000f 	andlt.w	r0, r0, #15
 80002e8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	bfa5      	ittet	ge
 80002ec:	b2d2      	uxtbge	r2, r2
 80002ee:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002f8:	bd30      	pop	{r4, r5, pc}
 80002fa:	bf00      	nop
 80002fc:	e000ed00 	.word	0xe000ed00
 8000300:	e000ed14 	.word	0xe000ed14

08000304 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	0942      	lsrs	r2, r0, #5
 8000306:	2301      	movs	r3, #1
 8000308:	f000 001f 	and.w	r0, r0, #31
 800030c:	fa03 f000 	lsl.w	r0, r3, r0
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <HAL_NVIC_EnableIRQ+0x14>)
 8000312:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100

0800031c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031c:	3801      	subs	r0, #1
 800031e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000322:	d20a      	bcs.n	800033a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <HAL_SYSTICK_Config+0x28>)
 8000328:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000332:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000334:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800033a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000348:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800034a:	b300      	cbz	r0, 800038e <HAL_DMA_Init+0x46>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 800034c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000350:	b90b      	cbnz	r3, 8000356 <HAL_DMA_Init+0xe>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000352:	f880 3020 	strb.w	r3, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000356:	6882      	ldr	r2, [r0, #8]
 8000358:	6841      	ldr	r1, [r0, #4]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800035a:	6804      	ldr	r4, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800035c:	4311      	orrs	r1, r2
 800035e:	68c2      	ldr	r2, [r0, #12]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000360:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000362:	4311      	orrs	r1, r2
 8000364:	6902      	ldr	r2, [r0, #16]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000366:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800036a:	4311      	orrs	r1, r2
 800036c:	6942      	ldr	r2, [r0, #20]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800036e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000372:	4311      	orrs	r1, r2
 8000374:	6982      	ldr	r2, [r0, #24]
 8000376:	4311      	orrs	r1, r2
 8000378:	69c2      	ldr	r2, [r0, #28]
 800037a:	430a      	orrs	r2, r1
 800037c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800037e:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000380:	2201      	movs	r2, #1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000382:	2300      	movs	r3, #0
 8000384:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000386:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  return HAL_OK;
 800038a:	4618      	mov	r0, r3
 800038c:	bd10      	pop	{r4, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800038e:	2001      	movs	r0, #1

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  
  return HAL_OK;
}
 8000390:	bd10      	pop	{r4, pc}

08000392 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000392:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8000394:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000398:	2c01      	cmp	r4, #1
 800039a:	f04f 0402 	mov.w	r4, #2
 800039e:	d023      	beq.n	80003e8 <HAL_DMA_Start_IT+0x56>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80003a0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80003a4:	6804      	ldr	r4, [r0, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Process locked */
  __HAL_LOCK(hdma);
 80003a6:	2501      	movs	r5, #1
 80003a8:	f880 5020 	strb.w	r5, [r0, #32]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80003ac:	6825      	ldr	r5, [r4, #0]
 80003ae:	f025 0501 	bic.w	r5, r5, #1
 80003b2:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80003b4:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80003b6:	6843      	ldr	r3, [r0, #4]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
  
  return HAL_OK;
 80003b8:	2000      	movs	r0, #0
{
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80003ba:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80003bc:	bf0b      	itete	eq
 80003be:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80003c0:	60a1      	strne	r1, [r4, #8]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80003c2:	60e1      	streq	r1, [r4, #12]
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80003c4:	60e2      	strne	r2, [r4, #12]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80003c6:	6823      	ldr	r3, [r4, #0]
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	6023      	str	r3, [r4, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80003ce:	6823      	ldr	r3, [r4, #0]
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6023      	str	r3, [r4, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80003d6:	6823      	ldr	r3, [r4, #0]
 80003d8:	f043 0308 	orr.w	r3, r3, #8
 80003dc:	6023      	str	r3, [r4, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 80003de:	6823      	ldr	r3, [r4, #0]
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6023      	str	r3, [r4, #0]
  
  return HAL_OK;
 80003e6:	bd30      	pop	{r4, r5, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Process locked */
  __HAL_LOCK(hdma);
 80003e8:	4620      	mov	r0, r4
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
  
  return HAL_OK;
} 
 80003ea:	bd30      	pop	{r4, r5, pc}

080003ec <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80003ec:	4b91      	ldr	r3, [pc, #580]	; (8000634 <HAL_DMA_IRQHandler+0x248>)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80003ee:	b570      	push	{r4, r5, r6, lr}
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80003f0:	6819      	ldr	r1, [r3, #0]
 80003f2:	4d91      	ldr	r5, [pc, #580]	; (8000638 <HAL_DMA_IRQHandler+0x24c>)
 80003f4:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80003f6:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80003f8:	42ab      	cmp	r3, r5
 80003fa:	d013      	beq.n	8000424 <HAL_DMA_IRQHandler+0x38>
 80003fc:	4a8f      	ldr	r2, [pc, #572]	; (800063c <HAL_DMA_IRQHandler+0x250>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d012      	beq.n	8000428 <HAL_DMA_IRQHandler+0x3c>
 8000402:	3214      	adds	r2, #20
 8000404:	4293      	cmp	r3, r2
 8000406:	d011      	beq.n	800042c <HAL_DMA_IRQHandler+0x40>
 8000408:	3214      	adds	r2, #20
 800040a:	4293      	cmp	r3, r2
 800040c:	d011      	beq.n	8000432 <HAL_DMA_IRQHandler+0x46>
 800040e:	3214      	adds	r2, #20
 8000410:	4293      	cmp	r3, r2
 8000412:	d011      	beq.n	8000438 <HAL_DMA_IRQHandler+0x4c>
 8000414:	3214      	adds	r2, #20
 8000416:	4293      	cmp	r3, r2
 8000418:	bf0c      	ite	eq
 800041a:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
 800041e:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000422:	e00b      	b.n	800043c <HAL_DMA_IRQHandler+0x50>
 8000424:	2208      	movs	r2, #8
 8000426:	e009      	b.n	800043c <HAL_DMA_IRQHandler+0x50>
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	e007      	b.n	800043c <HAL_DMA_IRQHandler+0x50>
 800042c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000430:	e004      	b.n	800043c <HAL_DMA_IRQHandler+0x50>
 8000432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000436:	e001      	b.n	800043c <HAL_DMA_IRQHandler+0x50>
 8000438:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800043c:	420a      	tst	r2, r1
 800043e:	d038      	beq.n	80004b2 <HAL_DMA_IRQHandler+0xc6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	0712      	lsls	r2, r2, #28
 8000444:	d535      	bpl.n	80004b2 <HAL_DMA_IRQHandler+0xc6>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000446:	681a      	ldr	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000448:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800044a:	f022 0208 	bic.w	r2, r2, #8
 800044e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000450:	d013      	beq.n	800047a <HAL_DMA_IRQHandler+0x8e>
 8000452:	4a7a      	ldr	r2, [pc, #488]	; (800063c <HAL_DMA_IRQHandler+0x250>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d012      	beq.n	800047e <HAL_DMA_IRQHandler+0x92>
 8000458:	3214      	adds	r2, #20
 800045a:	4293      	cmp	r3, r2
 800045c:	d011      	beq.n	8000482 <HAL_DMA_IRQHandler+0x96>
 800045e:	3214      	adds	r2, #20
 8000460:	4293      	cmp	r3, r2
 8000462:	d011      	beq.n	8000488 <HAL_DMA_IRQHandler+0x9c>
 8000464:	3214      	adds	r2, #20
 8000466:	4293      	cmp	r3, r2
 8000468:	d011      	beq.n	800048e <HAL_DMA_IRQHandler+0xa2>
 800046a:	3214      	adds	r2, #20
 800046c:	4293      	cmp	r3, r2
 800046e:	bf0c      	ite	eq
 8000470:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
 8000474:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8000478:	e00b      	b.n	8000492 <HAL_DMA_IRQHandler+0xa6>
 800047a:	2308      	movs	r3, #8
 800047c:	e009      	b.n	8000492 <HAL_DMA_IRQHandler+0xa6>
 800047e:	2380      	movs	r3, #128	; 0x80
 8000480:	e007      	b.n	8000492 <HAL_DMA_IRQHandler+0xa6>
 8000482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000486:	e004      	b.n	8000492 <HAL_DMA_IRQHandler+0xa6>
 8000488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800048c:	e001      	b.n	8000492 <HAL_DMA_IRQHandler+0xa6>
 800048e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000492:	4a68      	ldr	r2, [pc, #416]	; (8000634 <HAL_DMA_IRQHandler+0x248>)
 8000494:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8000496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6363      	str	r3, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800049e:	2304      	movs	r3, #4
 80004a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80004a4:	2300      	movs	r3, #0
 80004a6:	f884 3020 	strb.w	r3, [r4, #32]
      
      if (hdma->XferErrorCallback != NULL)
 80004aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80004ac:	b10b      	cbz	r3, 80004b2 <HAL_DMA_IRQHandler+0xc6>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80004ae:	4620      	mov	r0, r4
 80004b0:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80004b2:	4b60      	ldr	r3, [pc, #384]	; (8000634 <HAL_DMA_IRQHandler+0x248>)
 80004b4:	6819      	ldr	r1, [r3, #0]
 80004b6:	6823      	ldr	r3, [r4, #0]
 80004b8:	42ab      	cmp	r3, r5
 80004ba:	d013      	beq.n	80004e4 <HAL_DMA_IRQHandler+0xf8>
 80004bc:	4a5f      	ldr	r2, [pc, #380]	; (800063c <HAL_DMA_IRQHandler+0x250>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d012      	beq.n	80004e8 <HAL_DMA_IRQHandler+0xfc>
 80004c2:	3214      	adds	r2, #20
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d011      	beq.n	80004ec <HAL_DMA_IRQHandler+0x100>
 80004c8:	3214      	adds	r2, #20
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d011      	beq.n	80004f2 <HAL_DMA_IRQHandler+0x106>
 80004ce:	3214      	adds	r2, #20
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d011      	beq.n	80004f8 <HAL_DMA_IRQHandler+0x10c>
 80004d4:	3214      	adds	r2, #20
 80004d6:	4293      	cmp	r3, r2
 80004d8:	bf0c      	ite	eq
 80004da:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 80004de:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80004e2:	e00b      	b.n	80004fc <HAL_DMA_IRQHandler+0x110>
 80004e4:	2204      	movs	r2, #4
 80004e6:	e009      	b.n	80004fc <HAL_DMA_IRQHandler+0x110>
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	e007      	b.n	80004fc <HAL_DMA_IRQHandler+0x110>
 80004ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f0:	e004      	b.n	80004fc <HAL_DMA_IRQHandler+0x110>
 80004f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004f6:	e001      	b.n	80004fc <HAL_DMA_IRQHandler+0x110>
 80004f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004fc:	420a      	tst	r2, r1
 80004fe:	d034      	beq.n	800056a <HAL_DMA_IRQHandler+0x17e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	0756      	lsls	r6, r2, #29
 8000504:	d531      	bpl.n	800056a <HAL_DMA_IRQHandler+0x17e>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	0690      	lsls	r0, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800050a:	bf5e      	ittt	pl
 800050c:	681a      	ldrpl	r2, [r3, #0]
 800050e:	f022 0204 	bicpl.w	r2, r2, #4
 8000512:	601a      	strpl	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000514:	42ab      	cmp	r3, r5
 8000516:	d013      	beq.n	8000540 <HAL_DMA_IRQHandler+0x154>
 8000518:	4a48      	ldr	r2, [pc, #288]	; (800063c <HAL_DMA_IRQHandler+0x250>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d012      	beq.n	8000544 <HAL_DMA_IRQHandler+0x158>
 800051e:	3214      	adds	r2, #20
 8000520:	4293      	cmp	r3, r2
 8000522:	d011      	beq.n	8000548 <HAL_DMA_IRQHandler+0x15c>
 8000524:	3214      	adds	r2, #20
 8000526:	4293      	cmp	r3, r2
 8000528:	d011      	beq.n	800054e <HAL_DMA_IRQHandler+0x162>
 800052a:	3214      	adds	r2, #20
 800052c:	4293      	cmp	r3, r2
 800052e:	d011      	beq.n	8000554 <HAL_DMA_IRQHandler+0x168>
 8000530:	3214      	adds	r2, #20
 8000532:	4293      	cmp	r3, r2
 8000534:	bf0c      	ite	eq
 8000536:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800053a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800053e:	e00b      	b.n	8000558 <HAL_DMA_IRQHandler+0x16c>
 8000540:	2304      	movs	r3, #4
 8000542:	e009      	b.n	8000558 <HAL_DMA_IRQHandler+0x16c>
 8000544:	2340      	movs	r3, #64	; 0x40
 8000546:	e007      	b.n	8000558 <HAL_DMA_IRQHandler+0x16c>
 8000548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054c:	e004      	b.n	8000558 <HAL_DMA_IRQHandler+0x16c>
 800054e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000552:	e001      	b.n	8000558 <HAL_DMA_IRQHandler+0x16c>
 8000554:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000558:	4a36      	ldr	r2, [pc, #216]	; (8000634 <HAL_DMA_IRQHandler+0x248>)
 800055a:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800055c:	2311      	movs	r3, #17
 800055e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8000562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000564:	b10b      	cbz	r3, 800056a <HAL_DMA_IRQHandler+0x17e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000566:	4620      	mov	r0, r4
 8000568:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800056a:	4b32      	ldr	r3, [pc, #200]	; (8000634 <HAL_DMA_IRQHandler+0x248>)
 800056c:	6819      	ldr	r1, [r3, #0]
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	42ab      	cmp	r3, r5
 8000572:	d013      	beq.n	800059c <HAL_DMA_IRQHandler+0x1b0>
 8000574:	4a31      	ldr	r2, [pc, #196]	; (800063c <HAL_DMA_IRQHandler+0x250>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d012      	beq.n	80005a0 <HAL_DMA_IRQHandler+0x1b4>
 800057a:	3214      	adds	r2, #20
 800057c:	4293      	cmp	r3, r2
 800057e:	d011      	beq.n	80005a4 <HAL_DMA_IRQHandler+0x1b8>
 8000580:	3214      	adds	r2, #20
 8000582:	4293      	cmp	r3, r2
 8000584:	d011      	beq.n	80005aa <HAL_DMA_IRQHandler+0x1be>
 8000586:	3214      	adds	r2, #20
 8000588:	4293      	cmp	r3, r2
 800058a:	d011      	beq.n	80005b0 <HAL_DMA_IRQHandler+0x1c4>
 800058c:	3214      	adds	r2, #20
 800058e:	4293      	cmp	r3, r2
 8000590:	bf0c      	ite	eq
 8000592:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000596:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800059a:	e00b      	b.n	80005b4 <HAL_DMA_IRQHandler+0x1c8>
 800059c:	2202      	movs	r2, #2
 800059e:	e009      	b.n	80005b4 <HAL_DMA_IRQHandler+0x1c8>
 80005a0:	2220      	movs	r2, #32
 80005a2:	e007      	b.n	80005b4 <HAL_DMA_IRQHandler+0x1c8>
 80005a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a8:	e004      	b.n	80005b4 <HAL_DMA_IRQHandler+0x1c8>
 80005aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ae:	e001      	b.n	80005b4 <HAL_DMA_IRQHandler+0x1c8>
 80005b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005b4:	420a      	tst	r2, r1
 80005b6:	d03b      	beq.n	8000630 <HAL_DMA_IRQHandler+0x244>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	0791      	lsls	r1, r2, #30
 80005bc:	d538      	bpl.n	8000630 <HAL_DMA_IRQHandler+0x244>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	0692      	lsls	r2, r2, #26
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80005c2:	bf5e      	ittt	pl
 80005c4:	681a      	ldrpl	r2, [r3, #0]
 80005c6:	f022 0202 	bicpl.w	r2, r2, #2
 80005ca:	601a      	strpl	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d013      	beq.n	80005f8 <HAL_DMA_IRQHandler+0x20c>
 80005d0:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_DMA_IRQHandler+0x250>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d012      	beq.n	80005fc <HAL_DMA_IRQHandler+0x210>
 80005d6:	3214      	adds	r2, #20
 80005d8:	4293      	cmp	r3, r2
 80005da:	d011      	beq.n	8000600 <HAL_DMA_IRQHandler+0x214>
 80005dc:	3214      	adds	r2, #20
 80005de:	4293      	cmp	r3, r2
 80005e0:	d011      	beq.n	8000606 <HAL_DMA_IRQHandler+0x21a>
 80005e2:	3214      	adds	r2, #20
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d011      	beq.n	800060c <HAL_DMA_IRQHandler+0x220>
 80005e8:	3214      	adds	r2, #20
 80005ea:	4293      	cmp	r3, r2
 80005ec:	bf0c      	ite	eq
 80005ee:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80005f2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80005f6:	e00b      	b.n	8000610 <HAL_DMA_IRQHandler+0x224>
 80005f8:	2302      	movs	r3, #2
 80005fa:	e009      	b.n	8000610 <HAL_DMA_IRQHandler+0x224>
 80005fc:	2320      	movs	r3, #32
 80005fe:	e007      	b.n	8000610 <HAL_DMA_IRQHandler+0x224>
 8000600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000604:	e004      	b.n	8000610 <HAL_DMA_IRQHandler+0x224>
 8000606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060a:	e001      	b.n	8000610 <HAL_DMA_IRQHandler+0x224>
 800060c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_DMA_IRQHandler+0x248>)
 8000612:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8000614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000616:	6363      	str	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000618:	2301      	movs	r3, #1
 800061a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800061e:	2300      	movs	r3, #0
 8000620:	f884 3020 	strb.w	r3, [r4, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8000624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000626:	b11b      	cbz	r3, 8000630 <HAL_DMA_IRQHandler+0x244>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000628:	4620      	mov	r0, r4
      }
    }
  }
}
 800062a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_UNLOCK(hdma);
    
      if(hdma->XferCpltCallback != NULL)
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800062e:	4718      	bx	r3
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	bf00      	nop
 8000634:	40020000 	.word	0x40020000
 8000638:	40020008 	.word	0x40020008
 800063c:	4002001c 	.word	0x4002001c

08000640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000644:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000646:	4626      	mov	r6, r4
 8000648:	4b62      	ldr	r3, [pc, #392]	; (80007d4 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800064a:	f8df e194 	ldr.w	lr, [pc, #404]	; 80007e0 <HAL_GPIO_Init+0x1a0>
 800064e:	f8df c194 	ldr.w	ip, [pc, #404]	; 80007e4 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000652:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000654:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000656:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000658:	ea32 0505 	bics.w	r5, r2, r5
 800065c:	f040 80b3 	bne.w	80007c6 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000660:	684d      	ldr	r5, [r1, #4]
 8000662:	2d12      	cmp	r5, #18
 8000664:	d028      	beq.n	80006b8 <HAL_GPIO_Init+0x78>
 8000666:	d80e      	bhi.n	8000686 <HAL_GPIO_Init+0x46>
 8000668:	2d02      	cmp	r5, #2
 800066a:	d022      	beq.n	80006b2 <HAL_GPIO_Init+0x72>
 800066c:	d804      	bhi.n	8000678 <HAL_GPIO_Init+0x38>
 800066e:	b335      	cbz	r5, 80006be <HAL_GPIO_Init+0x7e>
 8000670:	2d01      	cmp	r5, #1
 8000672:	d12d      	bne.n	80006d0 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000674:	68cc      	ldr	r4, [r1, #12]
          break;
 8000676:	e02b      	b.n	80006d0 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000678:	2d03      	cmp	r5, #3
 800067a:	d018      	beq.n	80006ae <HAL_GPIO_Init+0x6e>
 800067c:	2d11      	cmp	r5, #17
 800067e:	d127      	bne.n	80006d0 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000680:	68cc      	ldr	r4, [r1, #12]
 8000682:	3404      	adds	r4, #4
          break;
 8000684:	e024      	b.n	80006d0 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000686:	4f54      	ldr	r7, [pc, #336]	; (80007d8 <HAL_GPIO_Init+0x198>)
 8000688:	42bd      	cmp	r5, r7
 800068a:	d018      	beq.n	80006be <HAL_GPIO_Init+0x7e>
 800068c:	d806      	bhi.n	800069c <HAL_GPIO_Init+0x5c>
 800068e:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80007e8 <HAL_GPIO_Init+0x1a8>
 8000692:	4545      	cmp	r5, r8
 8000694:	d013      	beq.n	80006be <HAL_GPIO_Init+0x7e>
 8000696:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800069a:	e005      	b.n	80006a8 <HAL_GPIO_Init+0x68>
 800069c:	4575      	cmp	r5, lr
 800069e:	d00e      	beq.n	80006be <HAL_GPIO_Init+0x7e>
 80006a0:	4565      	cmp	r5, ip
 80006a2:	d00c      	beq.n	80006be <HAL_GPIO_Init+0x7e>
 80006a4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80007ec <HAL_GPIO_Init+0x1ac>
 80006a8:	4545      	cmp	r5, r8
 80006aa:	d111      	bne.n	80006d0 <HAL_GPIO_Init+0x90>
 80006ac:	e007      	b.n	80006be <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006ae:	2400      	movs	r4, #0
 80006b0:	e00e      	b.n	80006d0 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006b2:	68cc      	ldr	r4, [r1, #12]
 80006b4:	3408      	adds	r4, #8
          break;
 80006b6:	e00b      	b.n	80006d0 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006b8:	68cc      	ldr	r4, [r1, #12]
 80006ba:	340c      	adds	r4, #12
          break;
 80006bc:	e008      	b.n	80006d0 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80006be:	688c      	ldr	r4, [r1, #8]
 80006c0:	b12c      	cbz	r4, 80006ce <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80006c2:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80006c4:	bf0c      	ite	eq
 80006c6:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80006c8:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006ca:	2408      	movs	r4, #8
 80006cc:	e000      	b.n	80006d0 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006ce:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006d0:	2aff      	cmp	r2, #255	; 0xff
 80006d2:	bf97      	itett	ls
 80006d4:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80006d6:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006da:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80006de:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006e0:	bf84      	itt	hi
 80006e2:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80006e6:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80006e8:	f04f 080f 	mov.w	r8, #15
 80006ec:	fa08 fa05 	lsl.w	sl, r8, r5
 80006f0:	ea29 090a 	bic.w	r9, r9, sl
 80006f4:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006f8:	bf88      	it	hi
 80006fa:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80006fe:	ea49 0505 	orr.w	r5, r9, r5
 8000702:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000706:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800070a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800070e:	d05a      	beq.n	80007c6 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000710:	4d32      	ldr	r5, [pc, #200]	; (80007dc <HAL_GPIO_Init+0x19c>)
 8000712:	4f32      	ldr	r7, [pc, #200]	; (80007dc <HAL_GPIO_Init+0x19c>)
 8000714:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000716:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800071a:	f045 0501 	orr.w	r5, r5, #1
 800071e:	61bd      	str	r5, [r7, #24]
 8000720:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000722:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000726:	f005 0501 	and.w	r5, r5, #1
 800072a:	9501      	str	r5, [sp, #4]
 800072c:	9d01      	ldr	r5, [sp, #4]
 800072e:	f026 0503 	bic.w	r5, r6, #3
 8000732:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000736:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 800073a:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800073e:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000742:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000746:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000748:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800074c:	d010      	beq.n	8000770 <HAL_GPIO_Init+0x130>
 800074e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000752:	42b8      	cmp	r0, r7
 8000754:	d00f      	beq.n	8000776 <HAL_GPIO_Init+0x136>
 8000756:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800075a:	42b8      	cmp	r0, r7
 800075c:	d00e      	beq.n	800077c <HAL_GPIO_Init+0x13c>
 800075e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000762:	42b8      	cmp	r0, r7
 8000764:	bf0c      	ite	eq
 8000766:	f04f 0b03 	moveq.w	fp, #3
 800076a:	f04f 0b04 	movne.w	fp, #4
 800076e:	e007      	b.n	8000780 <HAL_GPIO_Init+0x140>
 8000770:	f04f 0b00 	mov.w	fp, #0
 8000774:	e004      	b.n	8000780 <HAL_GPIO_Init+0x140>
 8000776:	f04f 0b01 	mov.w	fp, #1
 800077a:	e001      	b.n	8000780 <HAL_GPIO_Init+0x140>
 800077c:	f04f 0b02 	mov.w	fp, #2
 8000780:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000784:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000788:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800078c:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800078e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000792:	bf14      	ite	ne
 8000794:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000796:	4395      	biceq	r5, r2
 8000798:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800079a:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800079c:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80007a0:	bf14      	ite	ne
 80007a2:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80007a4:	4395      	biceq	r5, r2
 80007a6:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80007a8:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007aa:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80007ae:	bf14      	ite	ne
 80007b0:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80007b2:	4395      	biceq	r5, r2
 80007b4:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80007b6:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007b8:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80007bc:	bf14      	ite	ne
 80007be:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80007c0:	ea25 0202 	biceq.w	r2, r5, r2
 80007c4:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80007c6:	3601      	adds	r6, #1
 80007c8:	2e10      	cmp	r6, #16
 80007ca:	f47f af42 	bne.w	8000652 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80007ce:	b003      	add	sp, #12
 80007d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007d4:	40010400 	.word	0x40010400
 80007d8:	10210000 	.word	0x10210000
 80007dc:	40021000 	.word	0x40021000
 80007e0:	10310000 	.word	0x10310000
 80007e4:	10320000 	.word	0x10320000
 80007e8:	10110000 	.word	0x10110000
 80007ec:	10220000 	.word	0x10220000

080007f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007f0:	b902      	cbnz	r2, 80007f4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80007f2:	0409      	lsls	r1, r1, #16
 80007f4:	6101      	str	r1, [r0, #16]
 80007f6:	4770      	bx	lr

080007f8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007f8:	68c3      	ldr	r3, [r0, #12]
 80007fa:	4059      	eors	r1, r3
 80007fc:	60c1      	str	r1, [r0, #12]
 80007fe:	4770      	bx	lr

08000800 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000800:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000802:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000806:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000808:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800080a:	d403      	bmi.n	8000814 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800080c:	682b      	ldr	r3, [r5, #0]
 800080e:	0798      	lsls	r0, r3, #30
 8000810:	d473      	bmi.n	80008fa <HAL_RCC_OscConfig+0xfa>
 8000812:	e0f2      	b.n	80009fa <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000814:	4cb9      	ldr	r4, [pc, #740]	; (8000afc <HAL_RCC_OscConfig+0x2fc>)
 8000816:	6863      	ldr	r3, [r4, #4]
 8000818:	f003 030c 	and.w	r3, r3, #12
 800081c:	2b04      	cmp	r3, #4
 800081e:	d007      	beq.n	8000830 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000820:	6863      	ldr	r3, [r4, #4]
 8000822:	f003 030c 	and.w	r3, r3, #12
 8000826:	2b08      	cmp	r3, #8
 8000828:	d116      	bne.n	8000858 <HAL_RCC_OscConfig+0x58>
 800082a:	6863      	ldr	r3, [r4, #4]
 800082c:	03d9      	lsls	r1, r3, #15
 800082e:	d513      	bpl.n	8000858 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000834:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000838:	6822      	ldr	r2, [r4, #0]
 800083a:	fa93 f3a3 	rbit	r3, r3
 800083e:	fab3 f383 	clz	r3, r3
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	fa22 f303 	lsr.w	r3, r2, r3
 800084a:	07da      	lsls	r2, r3, #31
 800084c:	d5de      	bpl.n	800080c <HAL_RCC_OscConfig+0xc>
 800084e:	686b      	ldr	r3, [r5, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1db      	bne.n	800080c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000854:	2001      	movs	r0, #1
 8000856:	e22d      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000858:	686b      	ldr	r3, [r5, #4]
 800085a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800085e:	d015      	beq.n	800088c <HAL_RCC_OscConfig+0x8c>
 8000860:	b96b      	cbnz	r3, 800087e <HAL_RCC_OscConfig+0x7e>
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800086c:	6023      	str	r3, [r4, #0]
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000874:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000876:	f7ff fceb 	bl	8000250 <HAL_GetTick>
 800087a:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087c:	e02f      	b.n	80008de <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	d106      	bne.n	8000894 <HAL_RCC_OscConfig+0x94>
 8000886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088a:	6023      	str	r3, [r4, #0]
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000892:	e005      	b.n	80008a0 <HAL_RCC_OscConfig+0xa0>
 8000894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000898:	6023      	str	r3, [r4, #0]
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a0:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a2:	f7ff fcd5 	bl	8000250 <HAL_GetTick>
 80008a6:	4607      	mov	r7, r0
 80008a8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008ac:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b0:	6822      	ldr	r2, [r4, #0]
 80008b2:	fa96 f3a6 	rbit	r3, r6
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	fa22 f303 	lsr.w	r3, r2, r3
 80008c2:	07db      	lsls	r3, r3, #31
 80008c4:	d4a2      	bmi.n	800080c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008c6:	f7ff fcc3 	bl	8000250 <HAL_GetTick>
 80008ca:	1bc0      	subs	r0, r0, r7
 80008cc:	2864      	cmp	r0, #100	; 0x64
 80008ce:	d9ed      	bls.n	80008ac <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 80008d0:	2003      	movs	r0, #3
 80008d2:	e1ef      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d4:	f7ff fcbc 	bl	8000250 <HAL_GetTick>
 80008d8:	1bc0      	subs	r0, r0, r7
 80008da:	2864      	cmp	r0, #100	; 0x64
 80008dc:	d8f8      	bhi.n	80008d0 <HAL_RCC_OscConfig+0xd0>
 80008de:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e2:	6822      	ldr	r2, [r4, #0]
 80008e4:	fa96 f3a6 	rbit	r3, r6
 80008e8:	fab3 f383 	clz	r3, r3
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	fa22 f303 	lsr.w	r3, r2, r3
 80008f4:	07d8      	lsls	r0, r3, #31
 80008f6:	d4ed      	bmi.n	80008d4 <HAL_RCC_OscConfig+0xd4>
 80008f8:	e788      	b.n	800080c <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008fa:	4c80      	ldr	r4, [pc, #512]	; (8000afc <HAL_RCC_OscConfig+0x2fc>)
 80008fc:	6863      	ldr	r3, [r4, #4]
 80008fe:	f013 0f0c 	tst.w	r3, #12
 8000902:	d007      	beq.n	8000914 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	2b08      	cmp	r3, #8
 800090c:	d121      	bne.n	8000952 <HAL_RCC_OscConfig+0x152>
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	03d9      	lsls	r1, r3, #15
 8000912:	d41e      	bmi.n	8000952 <HAL_RCC_OscConfig+0x152>
 8000914:	2302      	movs	r3, #2
 8000916:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800091a:	6822      	ldr	r2, [r4, #0]
 800091c:	fa93 f3a3 	rbit	r3, r3
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	fa22 f303 	lsr.w	r3, r2, r3
 800092c:	07da      	lsls	r2, r3, #31
 800092e:	d502      	bpl.n	8000936 <HAL_RCC_OscConfig+0x136>
 8000930:	692b      	ldr	r3, [r5, #16]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d18e      	bne.n	8000854 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000936:	6823      	ldr	r3, [r4, #0]
 8000938:	22f8      	movs	r2, #248	; 0xf8
 800093a:	fa92 f2a2 	rbit	r2, r2
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	6969      	ldr	r1, [r5, #20]
 8000944:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	4313      	orrs	r3, r2
 800094e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000950:	e053      	b.n	80009fa <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000952:	692a      	ldr	r2, [r5, #16]
 8000954:	2301      	movs	r3, #1
 8000956:	b37a      	cbz	r2, 80009b8 <HAL_RCC_OscConfig+0x1b8>
 8000958:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800095c:	fab2 f282 	clz	r2, r2
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000966:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 800096a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800096c:	f7ff fc70 	bl	8000250 <HAL_GetTick>
 8000970:	4607      	mov	r7, r0
 8000972:	2602      	movs	r6, #2
 8000974:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000978:	4860      	ldr	r0, [pc, #384]	; (8000afc <HAL_RCC_OscConfig+0x2fc>)
 800097a:	6822      	ldr	r2, [r4, #0]
 800097c:	fa96 f3a6 	rbit	r3, r6
 8000980:	fab3 f383 	clz	r3, r3
 8000984:	f003 031f 	and.w	r3, r3, #31
 8000988:	fa22 f303 	lsr.w	r3, r2, r3
 800098c:	07db      	lsls	r3, r3, #31
 800098e:	d405      	bmi.n	800099c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fc5e 	bl	8000250 <HAL_GetTick>
 8000994:	1bc0      	subs	r0, r0, r7
 8000996:	2802      	cmp	r0, #2
 8000998:	d9ec      	bls.n	8000974 <HAL_RCC_OscConfig+0x174>
 800099a:	e799      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800099c:	6803      	ldr	r3, [r0, #0]
 800099e:	22f8      	movs	r2, #248	; 0xf8
 80009a0:	fa92 f2a2 	rbit	r2, r2
 80009a4:	fab2 f282 	clz	r2, r2
 80009a8:	6969      	ldr	r1, [r5, #20]
 80009aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4313      	orrs	r3, r2
 80009b4:	6003      	str	r3, [r0, #0]
 80009b6:	e020      	b.n	80009fa <HAL_RCC_OscConfig+0x1fa>
 80009b8:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009bc:	fab3 f383 	clz	r3, r3
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009c6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009cc:	f7ff fc40 	bl	8000250 <HAL_GetTick>
 80009d0:	4607      	mov	r7, r0
 80009d2:	2602      	movs	r6, #2
 80009d4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d8:	6822      	ldr	r2, [r4, #0]
 80009da:	fa96 f3a6 	rbit	r3, r6
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	f003 031f 	and.w	r3, r3, #31
 80009e6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ea:	07d9      	lsls	r1, r3, #31
 80009ec:	d505      	bpl.n	80009fa <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ee:	f7ff fc2f 	bl	8000250 <HAL_GetTick>
 80009f2:	1bc0      	subs	r0, r0, r7
 80009f4:	2802      	cmp	r0, #2
 80009f6:	d9ed      	bls.n	80009d4 <HAL_RCC_OscConfig+0x1d4>
 80009f8:	e76a      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	071a      	lsls	r2, r3, #28
 80009fe:	d546      	bpl.n	8000a8e <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a00:	69aa      	ldr	r2, [r5, #24]
 8000a02:	4c3e      	ldr	r4, [pc, #248]	; (8000afc <HAL_RCC_OscConfig+0x2fc>)
 8000a04:	2301      	movs	r3, #1
 8000a06:	493e      	ldr	r1, [pc, #248]	; (8000b00 <HAL_RCC_OscConfig+0x300>)
 8000a08:	b312      	cbz	r2, 8000a50 <HAL_RCC_OscConfig+0x250>
 8000a0a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a0e:	fab2 f282 	clz	r2, r2
 8000a12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a16:	f7ff fc1b 	bl	8000250 <HAL_GetTick>
 8000a1a:	4607      	mov	r7, r0
 8000a1c:	2602      	movs	r6, #2
 8000a1e:	fa96 f3a6 	rbit	r3, r6
 8000a22:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a28:	fa96 f3a6 	rbit	r3, r6
 8000a2c:	fab3 f383 	clz	r3, r3
 8000a30:	f003 031f 	and.w	r3, r3, #31
 8000a34:	fa22 f303 	lsr.w	r3, r2, r3
 8000a38:	07db      	lsls	r3, r3, #31
 8000a3a:	d405      	bmi.n	8000a48 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fc08 	bl	8000250 <HAL_GetTick>
 8000a40:	1bc0      	subs	r0, r0, r7
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9eb      	bls.n	8000a1e <HAL_RCC_OscConfig+0x21e>
 8000a46:	e743      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fc07 	bl	800025c <HAL_Delay>
 8000a4e:	e01e      	b.n	8000a8e <HAL_RCC_OscConfig+0x28e>
 8000a50:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a54:	fab3 f383 	clz	r3, r3
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fbf8 	bl	8000250 <HAL_GetTick>
 8000a60:	4607      	mov	r7, r0
 8000a62:	2602      	movs	r6, #2
 8000a64:	fa96 f3a6 	rbit	r3, r6
 8000a68:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a6e:	fa96 f3a6 	rbit	r3, r6
 8000a72:	fab3 f383 	clz	r3, r3
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7e:	07d8      	lsls	r0, r3, #31
 8000a80:	d505      	bpl.n	8000a8e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a82:	f7ff fbe5 	bl	8000250 <HAL_GetTick>
 8000a86:	1bc0      	subs	r0, r0, r7
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9eb      	bls.n	8000a64 <HAL_RCC_OscConfig+0x264>
 8000a8c:	e720      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	0759      	lsls	r1, r3, #29
 8000a92:	d404      	bmi.n	8000a9e <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a94:	69ea      	ldr	r2, [r5, #28]
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	f040 8081 	bne.w	8000b9e <HAL_RCC_OscConfig+0x39e>
 8000a9c:	e0d8      	b.n	8000c50 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4c17      	ldr	r4, [pc, #92]	; (8000afc <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aa0:	4e18      	ldr	r6, [pc, #96]	; (8000b04 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	69e3      	ldr	r3, [r4, #28]
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	61e3      	str	r3, [r4, #28]
 8000aaa:	69e3      	ldr	r3, [r4, #28]
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ab4:	6833      	ldr	r3, [r6, #0]
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aba:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000abc:	f7ff fbc8 	bl	8000250 <HAL_GetTick>
 8000ac0:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000ac2:	6833      	ldr	r3, [r6, #0]
 8000ac4:	05da      	lsls	r2, r3, #23
 8000ac6:	d405      	bmi.n	8000ad4 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ac8:	f7ff fbc2 	bl	8000250 <HAL_GetTick>
 8000acc:	1bc0      	subs	r0, r0, r7
 8000ace:	2864      	cmp	r0, #100	; 0x64
 8000ad0:	d9f7      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x2c2>
 8000ad2:	e6fd      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad4:	68eb      	ldr	r3, [r5, #12]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d01c      	beq.n	8000b14 <HAL_RCC_OscConfig+0x314>
 8000ada:	b9ab      	cbnz	r3, 8000b08 <HAL_RCC_OscConfig+0x308>
 8000adc:	6a23      	ldr	r3, [r4, #32]
 8000ade:	2602      	movs	r6, #2
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	6223      	str	r3, [r4, #32]
 8000ae6:	6a23      	ldr	r3, [r4, #32]
 8000ae8:	4637      	mov	r7, r6
 8000aea:	f023 0304 	bic.w	r3, r3, #4
 8000aee:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af0:	f7ff fbae 	bl	8000250 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af4:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af8:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afa:	e048      	b.n	8000b8e <HAL_RCC_OscConfig+0x38e>
 8000afc:	40021000 	.word	0x40021000
 8000b00:	42420480 	.word	0x42420480
 8000b04:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b08:	2b05      	cmp	r3, #5
 8000b0a:	6a23      	ldr	r3, [r4, #32]
 8000b0c:	d106      	bne.n	8000b1c <HAL_RCC_OscConfig+0x31c>
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	6223      	str	r3, [r4, #32]
 8000b14:	6a23      	ldr	r3, [r4, #32]
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	e005      	b.n	8000b28 <HAL_RCC_OscConfig+0x328>
 8000b1c:	f023 0301 	bic.w	r3, r3, #1
 8000b20:	6223      	str	r3, [r4, #32]
 8000b22:	6a23      	ldr	r3, [r4, #32]
 8000b24:	f023 0304 	bic.w	r3, r3, #4
 8000b28:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fb91 	bl	8000250 <HAL_GetTick>
 8000b2e:	2602      	movs	r6, #2
 8000b30:	4681      	mov	r9, r0
 8000b32:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b34:	f241 3788 	movw	r7, #5000	; 0x1388
 8000b38:	fa96 f3a6 	rbit	r3, r6
 8000b3c:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b40:	b10b      	cbz	r3, 8000b46 <HAL_RCC_OscConfig+0x346>
 8000b42:	6a22      	ldr	r2, [r4, #32]
 8000b44:	e000      	b.n	8000b48 <HAL_RCC_OscConfig+0x348>
 8000b46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b48:	fa98 f3a8 	rbit	r3, r8
 8000b4c:	fab3 f383 	clz	r3, r3
 8000b50:	f003 031f 	and.w	r3, r3, #31
 8000b54:	fa22 f303 	lsr.w	r3, r2, r3
 8000b58:	07db      	lsls	r3, r3, #31
 8000b5a:	d49b      	bmi.n	8000a94 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fb78 	bl	8000250 <HAL_GetTick>
 8000b60:	ebc9 0000 	rsb	r0, r9, r0
 8000b64:	42b8      	cmp	r0, r7
 8000b66:	d9e7      	bls.n	8000b38 <HAL_RCC_OscConfig+0x338>
 8000b68:	e6b2      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b6c:	fa97 f3a7 	rbit	r3, r7
 8000b70:	fab3 f383 	clz	r3, r3
 8000b74:	f003 031f 	and.w	r3, r3, #31
 8000b78:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7c:	07d8      	lsls	r0, r3, #31
 8000b7e:	d589      	bpl.n	8000a94 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b80:	f7ff fb66 	bl	8000250 <HAL_GetTick>
 8000b84:	ebc8 0000 	rsb	r0, r8, r0
 8000b88:	4548      	cmp	r0, r9
 8000b8a:	f63f aea1 	bhi.w	80008d0 <HAL_RCC_OscConfig+0xd0>
 8000b8e:	fa96 f3a6 	rbit	r3, r6
 8000b92:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0e7      	beq.n	8000b6a <HAL_RCC_OscConfig+0x36a>
 8000b9a:	6a22      	ldr	r2, [r4, #32]
 8000b9c:	e7e6      	b.n	8000b6c <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b9e:	4c47      	ldr	r4, [pc, #284]	; (8000cbc <HAL_RCC_OscConfig+0x4bc>)
 8000ba0:	6863      	ldr	r3, [r4, #4]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	f43f ae54 	beq.w	8000854 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bac:	2a02      	cmp	r2, #2
 8000bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb2:	d15c      	bne.n	8000c6e <HAL_RCC_OscConfig+0x46e>
 8000bb4:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb8:	fab3 f383 	clz	r3, r3
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000bc2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bca:	f7ff fb41 	bl	8000250 <HAL_GetTick>
 8000bce:	4680      	mov	r8, r0
 8000bd0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000bd4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd8:	4f38      	ldr	r7, [pc, #224]	; (8000cbc <HAL_RCC_OscConfig+0x4bc>)
 8000bda:	6822      	ldr	r2, [r4, #0]
 8000bdc:	fa96 f3a6 	rbit	r3, r6
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	f003 031f 	and.w	r3, r3, #31
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	07d9      	lsls	r1, r3, #31
 8000bee:	d431      	bmi.n	8000c54 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bf0:	6a2e      	ldr	r6, [r5, #32]
 8000bf2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000bf6:	d105      	bne.n	8000c04 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8000bfe:	68a9      	ldr	r1, [r5, #8]
 8000c00:	4301      	orrs	r1, r0
 8000c02:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c04:	6863      	ldr	r3, [r4, #4]
 8000c06:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c08:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000c0c:	4332      	orrs	r2, r6
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	6063      	str	r3, [r4, #4]
 8000c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c16:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c1a:	fab3 f383 	clz	r3, r3
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c24:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fb10 	bl	8000250 <HAL_GetTick>
 8000c30:	4606      	mov	r6, r0
 8000c32:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c36:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c3a:	6822      	ldr	r2, [r4, #0]
 8000c3c:	fa95 f3a5 	rbit	r3, r5
 8000c40:	fab3 f383 	clz	r3, r3
 8000c44:	f003 031f 	and.w	r3, r3, #31
 8000c48:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4c:	07da      	lsls	r2, r3, #31
 8000c4e:	d508      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000c50:	2000      	movs	r0, #0
 8000c52:	e02f      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c54:	f7ff fafc 	bl	8000250 <HAL_GetTick>
 8000c58:	ebc8 0000 	rsb	r0, r8, r0
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9b9      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x3d4>
 8000c60:	e636      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c62:	f7ff faf5 	bl	8000250 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	2802      	cmp	r0, #2
 8000c6a:	d9e4      	bls.n	8000c36 <HAL_RCC_OscConfig+0x436>
 8000c6c:	e630      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
 8000c6e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c7c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fae4 	bl	8000250 <HAL_GetTick>
 8000c88:	4606      	mov	r6, r0
 8000c8a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c8e:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c92:	6822      	ldr	r2, [r4, #0]
 8000c94:	fa95 f3a5 	rbit	r3, r5
 8000c98:	fab3 f383 	clz	r3, r3
 8000c9c:	f003 031f 	and.w	r3, r3, #31
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	07db      	lsls	r3, r3, #31
 8000ca6:	d5d3      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca8:	f7ff fad2 	bl	8000250 <HAL_GetTick>
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	2802      	cmp	r0, #2
 8000cb0:	d9ed      	bls.n	8000c8e <HAL_RCC_OscConfig+0x48e>
 8000cb2:	e60d      	b.n	80008d0 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000cb4:	b003      	add	sp, #12
 8000cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cc2:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000cc4:	f103 0510 	add.w	r5, r3, #16
 8000cc8:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cca:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ccc:	ac02      	add	r4, sp, #8
 8000cce:	4622      	mov	r2, r4
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	6859      	ldr	r1, [r3, #4]
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	c203      	stmia	r2!, {r0, r1}
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	4614      	mov	r4, r2
 8000cdc:	d1f7      	bne.n	8000cce <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000cde:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000ce0:	4c18      	ldr	r4, [pc, #96]	; (8000d44 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000ce2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000ce6:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ce8:	f000 030c 	and.w	r3, r0, #12
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d124      	bne.n	8000d3a <HAL_RCC_GetSysClockFreq+0x7a>
 8000cf0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000cf4:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	aa06      	add	r2, sp, #24
 8000d06:	4413      	add	r3, r2
 8000d08:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d0c:	03c3      	lsls	r3, r0, #15
 8000d0e:	d511      	bpl.n	8000d34 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000d10:	6862      	ldr	r2, [r4, #4]
 8000d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	fab3 f083 	clz	r0, r3
 8000d1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8000d22:	40c3      	lsrs	r3, r0
 8000d24:	aa06      	add	r2, sp, #24
 8000d26:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000d28:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_RCC_GetSysClockFreq+0x88>)
 8000d2e:	fbb3 f0f0 	udiv	r0, r3, r0
 8000d32:	e000      	b.n	8000d36 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000d36:	4348      	muls	r0, r1
 8000d38:	e000      	b.n	8000d3c <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
 8000d40:	08001c20 	.word	0x08001c20
 8000d44:	40021000 	.word	0x40021000
 8000d48:	007a1200 	.word	0x007a1200
 8000d4c:	003d0900 	.word	0x003d0900

08000d50 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d50:	4a54      	ldr	r2, [pc, #336]	; (8000ea4 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d56:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d58:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d60:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d62:	d30a      	bcc.n	8000d7a <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d64:	6831      	ldr	r1, [r6, #0]
 8000d66:	078c      	lsls	r4, r1, #30
 8000d68:	d514      	bpl.n	8000d94 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d6a:	484f      	ldr	r0, [pc, #316]	; (8000ea8 <HAL_RCC_ClockConfig+0x158>)
 8000d6c:	6843      	ldr	r3, [r0, #4]
 8000d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d72:	68b3      	ldr	r3, [r6, #8]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	6043      	str	r3, [r0, #4]
 8000d78:	e00c      	b.n	8000d94 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d7a:	6813      	ldr	r3, [r2, #0]
 8000d7c:	f023 0307 	bic.w	r3, r3, #7
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d84:	6813      	ldr	r3, [r2, #0]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d0ea      	beq.n	8000d64 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000d8e:	2001      	movs	r0, #1
 8000d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d94:	07c8      	lsls	r0, r1, #31
 8000d96:	d406      	bmi.n	8000da6 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d98:	4a42      	ldr	r2, [pc, #264]	; (8000ea4 <HAL_RCC_ClockConfig+0x154>)
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	429d      	cmp	r5, r3
 8000da2:	d34a      	bcc.n	8000e3a <HAL_RCC_ClockConfig+0xea>
 8000da4:	e053      	b.n	8000e4e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da6:	6872      	ldr	r2, [r6, #4]
 8000da8:	4c3f      	ldr	r4, [pc, #252]	; (8000ea8 <HAL_RCC_ClockConfig+0x158>)
 8000daa:	2a01      	cmp	r2, #1
 8000dac:	d102      	bne.n	8000db4 <HAL_RCC_ClockConfig+0x64>
 8000dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db2:	e004      	b.n	8000dbe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000db4:	2a02      	cmp	r2, #2
 8000db6:	bf0c      	ite	eq
 8000db8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000dbc:	2302      	movne	r3, #2
 8000dbe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc2:	6821      	ldr	r1, [r4, #0]
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	07d9      	lsls	r1, r3, #31
 8000dd6:	d5da      	bpl.n	8000d8e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd8:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dda:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dde:	f023 0303 	bic.w	r3, r3, #3
 8000de2:	431a      	orrs	r2, r3
 8000de4:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000de6:	f7ff fa33 	bl	8000250 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dea:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dec:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df2:	6863      	ldr	r3, [r4, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d0cd      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfc:	f7ff fa28 	bl	8000250 <HAL_GetTick>
 8000e00:	1bc0      	subs	r0, r0, r7
 8000e02:	4540      	cmp	r0, r8
 8000e04:	d9f5      	bls.n	8000df2 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000e06:	2003      	movs	r0, #3
 8000e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d10f      	bne.n	8000e30 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d0be      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1a:	f7ff fa19 	bl	8000250 <HAL_GetTick>
 8000e1e:	1bc0      	subs	r0, r0, r7
 8000e20:	4540      	cmp	r0, r8
 8000e22:	d9f5      	bls.n	8000e10 <HAL_RCC_ClockConfig+0xc0>
 8000e24:	e7ef      	b.n	8000e06 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e26:	f7ff fa13 	bl	8000250 <HAL_GetTick>
 8000e2a:	1bc0      	subs	r0, r0, r7
 8000e2c:	4540      	cmp	r0, r8
 8000e2e:	d8ea      	bhi.n	8000e06 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	f013 0f0c 	tst.w	r3, #12
 8000e36:	d1f6      	bne.n	8000e26 <HAL_RCC_ClockConfig+0xd6>
 8000e38:	e7ae      	b.n	8000d98 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	f023 0307 	bic.w	r3, r3, #7
 8000e40:	432b      	orrs	r3, r5
 8000e42:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e44:	6813      	ldr	r3, [r2, #0]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	429d      	cmp	r5, r3
 8000e4c:	d19f      	bne.n	8000d8e <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e4e:	6831      	ldr	r1, [r6, #0]
 8000e50:	4c15      	ldr	r4, [pc, #84]	; (8000ea8 <HAL_RCC_ClockConfig+0x158>)
 8000e52:	f011 0f04 	tst.w	r1, #4
 8000e56:	d005      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e58:	6863      	ldr	r3, [r4, #4]
 8000e5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e5e:	68f3      	ldr	r3, [r6, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e64:	070b      	lsls	r3, r1, #28
 8000e66:	d506      	bpl.n	8000e76 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e68:	6863      	ldr	r3, [r4, #4]
 8000e6a:	6932      	ldr	r2, [r6, #16]
 8000e6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e74:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000e76:	f7ff ff23 	bl	8000cc0 <HAL_RCC_GetSysClockFreq>
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	22f0      	movs	r2, #240	; 0xf0
 8000e7e:	fa92 f2a2 	rbit	r2, r2
 8000e82:	fab2 f282 	clz	r2, r2
 8000e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e8a:	40d3      	lsrs	r3, r2
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_RCC_ClockConfig+0x15c>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	40d8      	lsrs	r0, r3
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_RCC_ClockConfig+0x160>)
 8000e94:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f7ff f9ae 	bl	80001f8 <HAL_InitTick>
  
  return HAL_OK;
 8000e9c:	2000      	movs	r0, #0
}
 8000e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40022000 	.word	0x40022000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	08001c32 	.word	0x08001c32
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000eb4:	4b01      	ldr	r3, [pc, #4]	; (8000ebc <HAL_RCC_GetHCLKFreq+0x8>)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ec2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	fa92 f2a2 	rbit	r2, r2
 8000ecc:	fab2 f282 	clz	r2, r2
 8000ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ed4:	40d3      	lsrs	r3, r2
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000edc:	6810      	ldr	r0, [r2, #0]
}    
 8000ede:	40d8      	lsrs	r0, r3
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	08001c42 	.word	0x08001c42
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ef2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	fa92 f2a2 	rbit	r2, r2
 8000efc:	fab2 f282 	clz	r2, r2
 8000f00:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000f04:	40d3      	lsrs	r3, r2
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000f0c:	6810      	ldr	r0, [r2, #0]
} 
 8000f0e:	40d8      	lsrs	r0, r3
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	08001c42 	.word	0x08001c42
 8000f1c:	20000004 	.word	0x20000004

08000f20 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f20:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000f22:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f2a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f2c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000f2e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f30:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000f32:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f36:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000f38:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000f3c:	688b      	ldr	r3, [r1, #8]
 8000f3e:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <TIM_OC1_SetConfig+0x4c>)
 8000f42:	42a0      	cmp	r0, r4
 8000f44:	d10b      	bne.n	8000f5e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000f46:	68cc      	ldr	r4, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000f48:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000f4c:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f4e:	694e      	ldr	r6, [r1, #20]
 8000f50:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000f52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f56:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8000f58:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f5c:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f5e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000f60:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000f62:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000f64:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f66:	6203      	str	r3, [r0, #32]
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40012c00 	.word	0x40012c00

08000f70 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f70:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000f72:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f7a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f7c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000f7e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f80:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000f82:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f86:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000f88:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000f8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000f8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f92:	4d0c      	ldr	r5, [pc, #48]	; (8000fc4 <TIM_OC3_SetConfig+0x54>)
 8000f94:	42a8      	cmp	r0, r5
 8000f96:	d10e      	bne.n	8000fb6 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000f98:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000f9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8000fa2:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000fa4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8000fa8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000fac:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000fb2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000fb6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000fb8:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000fba:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000fbc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000fbe:	6203      	str	r3, [r0, #32]
 8000fc0:	bd30      	pop	{r4, r5, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40012c00 	.word	0x40012c00

08000fc8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fc8:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000fca:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fd0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000fd4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000fd6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000fd8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000fda:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000fde:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000fe2:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000fe8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000fec:	4d06      	ldr	r5, [pc, #24]	; (8001008 <TIM_OC4_SetConfig+0x40>)
 8000fee:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000ff0:	bf02      	ittt	eq
 8000ff2:	694d      	ldreq	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000ff4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000ff8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ffc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ffe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001000:	684a      	ldr	r2, [r1, #4]
 8001002:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001004:	6203      	str	r3, [r0, #32]
 8001006:	bd30      	pop	{r4, r5, pc}
 8001008:	40012c00 	.word	0x40012c00

0800100c <HAL_TIM_Encoder_MspInit>:
 800100c:	4770      	bx	lr

0800100e <HAL_TIM_PeriodElapsedCallback>:
 800100e:	4770      	bx	lr

08001010 <HAL_TIM_OC_DelayElapsedCallback>:
 8001010:	4770      	bx	lr

08001012 <HAL_TIM_IC_CaptureCallback>:
 8001012:	4770      	bx	lr

08001014 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001014:	4770      	bx	lr

08001016 <HAL_TIM_TriggerCallback>:
 8001016:	4770      	bx	lr

08001018 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001018:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800101a:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800101c:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800101e:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001020:	0791      	lsls	r1, r2, #30
 8001022:	d514      	bpl.n	800104e <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	0792      	lsls	r2, r2, #30
 8001028:	d511      	bpl.n	800104e <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800102a:	f06f 0202 	mvn.w	r2, #2
 800102e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001030:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001032:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001034:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001036:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001038:	d002      	beq.n	8001040 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800103a:	f7ff ffea 	bl	8001012 <HAL_TIM_IC_CaptureCallback>
 800103e:	e004      	b.n	800104a <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001040:	f7ff ffe6 	bl	8001010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff ffe5 	bl	8001014 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800104a:	2300      	movs	r3, #0
 800104c:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	0750      	lsls	r0, r2, #29
 8001054:	d516      	bpl.n	8001084 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	0751      	lsls	r1, r2, #29
 800105a:	d513      	bpl.n	8001084 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800105c:	f06f 0204 	mvn.w	r2, #4
 8001060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001062:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001064:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001066:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800106a:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800106c:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800106e:	d002      	beq.n	8001076 <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001070:	f7ff ffcf 	bl	8001012 <HAL_TIM_IC_CaptureCallback>
 8001074:	e004      	b.n	8001080 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001076:	f7ff ffcb 	bl	8001010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff ffca 	bl	8001014 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001080:	2300      	movs	r3, #0
 8001082:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	0712      	lsls	r2, r2, #28
 800108a:	d515      	bpl.n	80010b8 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	0710      	lsls	r0, r2, #28
 8001090:	d512      	bpl.n	80010b8 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001092:	f06f 0208 	mvn.w	r2, #8
 8001096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001098:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800109a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800109c:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800109e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80010a0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80010a2:	d002      	beq.n	80010aa <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80010a4:	f7ff ffb5 	bl	8001012 <HAL_TIM_IC_CaptureCallback>
 80010a8:	e004      	b.n	80010b4 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010aa:	f7ff ffb1 	bl	8001010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff ffb0 	bl	8001014 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010b4:	2300      	movs	r3, #0
 80010b6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	06d2      	lsls	r2, r2, #27
 80010be:	d516      	bpl.n	80010ee <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	06d0      	lsls	r0, r2, #27
 80010c4:	d513      	bpl.n	80010ee <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010c6:	f06f 0210 	mvn.w	r2, #16
 80010ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80010cc:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010ce:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80010d0:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010d4:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80010d6:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80010d8:	d002      	beq.n	80010e0 <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80010da:	f7ff ff9a 	bl	8001012 <HAL_TIM_IC_CaptureCallback>
 80010de:	e004      	b.n	80010ea <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010e0:	f7ff ff96 	bl	8001010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010e4:	4620      	mov	r0, r4
 80010e6:	f7ff ff95 	bl	8001014 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ea:	2300      	movs	r3, #0
 80010ec:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	07d1      	lsls	r1, r2, #31
 80010f4:	d508      	bpl.n	8001108 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	07d2      	lsls	r2, r2, #31
 80010fa:	d505      	bpl.n	8001108 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010fc:	f06f 0201 	mvn.w	r2, #1
 8001100:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001102:	4620      	mov	r0, r4
 8001104:	f7ff ff83 	bl	800100e <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	0610      	lsls	r0, r2, #24
 800110e:	d508      	bpl.n	8001122 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	0611      	lsls	r1, r2, #24
 8001114:	d505      	bpl.n	8001122 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001116:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800111a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800111c:	4620      	mov	r0, r4
 800111e:	f000 f968 	bl	80013f2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	0652      	lsls	r2, r2, #25
 8001128:	d508      	bpl.n	800113c <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	0650      	lsls	r0, r2, #25
 800112e:	d505      	bpl.n	800113c <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001134:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff ff6d 	bl	8001016 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	0691      	lsls	r1, r2, #26
 8001142:	d50a      	bpl.n	800115a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	0692      	lsls	r2, r2, #26
 8001148:	d507      	bpl.n	800115a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800114a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800114e:	4620      	mov	r0, r4
    }
  }
}
 8001150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001154:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001156:	f000 b94b 	b.w	80013f0 <HAL_TIMEx_CommutationCallback>
 800115a:	bd10      	pop	{r4, pc}

0800115c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800115c:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800115e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001160:	4290      	cmp	r0, r2
 8001162:	d00a      	beq.n	800117a <TIM_Base_SetConfig+0x1e>
 8001164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001168:	d007      	beq.n	800117a <TIM_Base_SetConfig+0x1e>
 800116a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800116e:	4290      	cmp	r0, r2
 8001170:	d003      	beq.n	800117a <TIM_Base_SetConfig+0x1e>
 8001172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001176:	4290      	cmp	r0, r2
 8001178:	d115      	bne.n	80011a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800117a:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800117c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001180:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <TIM_Base_SetConfig+0x64>)
 8001184:	4290      	cmp	r0, r2
 8001186:	d00a      	beq.n	800119e <TIM_Base_SetConfig+0x42>
 8001188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800118c:	d007      	beq.n	800119e <TIM_Base_SetConfig+0x42>
 800118e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001192:	4290      	cmp	r0, r2
 8001194:	d003      	beq.n	800119e <TIM_Base_SetConfig+0x42>
 8001196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119a:	4290      	cmp	r0, r2
 800119c:	d103      	bne.n	80011a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800119e:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80011a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011a4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80011a6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011a8:	688b      	ldr	r3, [r1, #8]
 80011aa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80011ac:	680b      	ldr	r3, [r1, #0]
 80011ae:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <TIM_Base_SetConfig+0x64>)
 80011b2:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011b4:	bf04      	itt	eq
 80011b6:	690b      	ldreq	r3, [r1, #16]
 80011b8:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80011ba:	2301      	movs	r3, #1
 80011bc:	6143      	str	r3, [r0, #20]
 80011be:	4770      	bx	lr
 80011c0:	40012c00 	.word	0x40012c00

080011c4 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80011c4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80011c6:	4604      	mov	r4, r0
 80011c8:	b1a0      	cbz	r0, 80011f4 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80011ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011d2:	b91b      	cbnz	r3, 80011dc <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80011d8:	f000 fc12 	bl	8001a00 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80011dc:	2302      	movs	r3, #2
 80011de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011e2:	6820      	ldr	r0, [r4, #0]
 80011e4:	1d21      	adds	r1, r4, #4
 80011e6:	f7ff ffb9 	bl	800115c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80011f0:	2000      	movs	r0, #0
 80011f2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 80011f6:	bd10      	pop	{r4, pc}

080011f8 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Check the TIM handle allocation */
  if(htim == NULL)
 80011fc:	4605      	mov	r5, r0
 80011fe:	2800      	cmp	r0, #0
 8001200:	d041      	beq.n	8001286 <HAL_TIM_Encoder_Init+0x8e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001202:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001206:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800120a:	b91b      	cbnz	r3, 8001214 <HAL_TIM_Encoder_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800120c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001210:	f7ff fefc 	bl	800100c <HAL_TIM_Encoder_MspInit>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001214:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001216:	2302      	movs	r3, #2

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001218:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800121c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001220:	6883      	ldr	r3, [r0, #8]
 8001222:	f023 0307 	bic.w	r3, r3, #7
 8001226:	6083      	str	r3, [r0, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001228:	f7ff ff98 	bl	800115c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800122c:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800122e:	6823      	ldr	r3, [r4, #0]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001230:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001232:	6981      	ldr	r1, [r0, #24]
 8001234:	69a2      	ldr	r2, [r4, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001236:	431f      	orrs	r7, r3
 8001238:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 800123c:	f023 0303 	bic.w	r3, r3, #3
 8001240:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8001244:	68a3      	ldr	r3, [r4, #8]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8001246:	6921      	ldr	r1, [r4, #16]
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8001248:	4313      	orrs	r3, r2

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800124a:	69e2      	ldr	r2, [r4, #28]
 800124c:	0109      	lsls	r1, r1, #4
 800124e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001252:	68e2      	ldr	r2, [r4, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001254:	6a06      	ldr	r6, [r0, #32]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8001256:	430a      	orrs	r2, r1
 8001258:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800125a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800125e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001262:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001266:	6961      	ldr	r1, [r4, #20]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8001268:	4313      	orrs	r3, r2
 800126a:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 800126e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8001272:	6861      	ldr	r1, [r4, #4]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001274:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8001276:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001278:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800127a:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800127c:	6202      	str	r2, [r0, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800127e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

  return HAL_OK;
 8001282:	2000      	movs	r0, #0
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;

  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001286:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8001288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800128c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800128c:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800128e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001290:	f023 0310 	bic.w	r3, r3, #16
 8001294:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001296:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001298:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800129a:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800129c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800129e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80012a2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80012a6:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80012a8:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80012ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80012b0:	4d0b      	ldr	r5, [pc, #44]	; (80012e0 <TIM_OC2_SetConfig+0x54>)
 80012b2:	42a8      	cmp	r0, r5
 80012b4:	d10e      	bne.n	80012d4 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80012b6:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80012b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80012bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80012c0:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80012c6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012ca:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80012cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012d0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012d4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80012d6:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80012d8:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80012da:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012dc:	6203      	str	r3, [r0, #32]
 80012de:	bd30      	pop	{r4, r5, pc}
 80012e0:	40012c00 	.word	0x40012c00

080012e4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80012e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80012e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80012ea:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80012ec:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80012ee:	460d      	mov	r5, r1
 80012f0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80012f4:	d058      	beq.n	80013a8 <HAL_TIM_PWM_ConfigChannel+0xc4>
 80012f6:	2301      	movs	r3, #1
 80012f8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80012fc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 8001300:	2a0c      	cmp	r2, #12
 8001302:	d84b      	bhi.n	800139c <HAL_TIM_PWM_ConfigChannel+0xb8>
 8001304:	e8df f002 	tbb	[pc, r2]
 8001308:	4a4a4a07 	.word	0x4a4a4a07
 800130c:	4a4a4a17 	.word	0x4a4a4a17
 8001310:	4a4a4a29 	.word	0x4a4a4a29
 8001314:	39          	.byte	0x39
 8001315:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001316:	6820      	ldr	r0, [r4, #0]
 8001318:	f7ff fe02 	bl	8000f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	f042 0208 	orr.w	r2, r2, #8
 8001324:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	f022 0204 	bic.w	r2, r2, #4
 800132c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800132e:	6999      	ldr	r1, [r3, #24]
 8001330:	692a      	ldr	r2, [r5, #16]
 8001332:	430a      	orrs	r2, r1
 8001334:	e00f      	b.n	8001356 <HAL_TIM_PWM_ConfigChannel+0x72>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001336:	6820      	ldr	r0, [r4, #0]
 8001338:	f7ff ffa8 	bl	800128c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800133c:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800133e:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001340:	699a      	ldr	r2, [r3, #24]
 8001342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800134e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001356:	619a      	str	r2, [r3, #24]
    }
    break;
 8001358:	e020      	b.n	800139c <HAL_TIM_PWM_ConfigChannel+0xb8>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800135a:	6820      	ldr	r0, [r4, #0]
 800135c:	f7ff fe08 	bl	8000f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	69da      	ldr	r2, [r3, #28]
 8001364:	f042 0208 	orr.w	r2, r2, #8
 8001368:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800136a:	69da      	ldr	r2, [r3, #28]
 800136c:	f022 0204 	bic.w	r2, r2, #4
 8001370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001372:	69d9      	ldr	r1, [r3, #28]
 8001374:	692a      	ldr	r2, [r5, #16]
 8001376:	430a      	orrs	r2, r1
 8001378:	e00f      	b.n	800139a <HAL_TIM_PWM_ConfigChannel+0xb6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800137a:	6820      	ldr	r0, [r4, #0]
 800137c:	f7ff fe24 	bl	8000fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001380:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001382:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800138a:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001392:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800139a:	61da      	str	r2, [r3, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800139c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800139e:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80013a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80013a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 80013a8:	bd38      	pop	{r3, r4, r5, pc}

080013aa <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80013aa:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80013ac:	2301      	movs	r3, #1
 80013ae:	6a04      	ldr	r4, [r0, #32]
 80013b0:	408b      	lsls	r3, r1
 80013b2:	ea24 0303 	bic.w	r3, r4, r3
 80013b6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80013b8:	6a03      	ldr	r3, [r0, #32]
 80013ba:	408a      	lsls	r2, r1
 80013bc:	ea42 0103 	orr.w	r1, r2, r3
 80013c0:	6201      	str	r1, [r0, #32]
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80013c8:	2201      	movs	r2, #1
 80013ca:	6800      	ldr	r0, [r0, #0]
 80013cc:	f7ff ffed 	bl	80013aa <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_TIM_PWM_Start+0x28>)
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80013d4:	2000      	movs	r0, #0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013d6:	4293      	cmp	r3, r2
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80013d8:	bf02      	ittt	eq
 80013da:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013dc:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80013e0:	645a      	streq	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f042 0201 	orr.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80013ea:	bd10      	pop	{r4, pc}
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <HAL_TIMEx_CommutationCallback>:
 80013f0:	4770      	bx	lr

080013f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013f2:	4770      	bx	lr

080013f4 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013f8:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 80013fa:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013fc:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013fe:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001400:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001404:	68c3      	ldr	r3, [r0, #12]
 8001406:	2419      	movs	r4, #25
 8001408:	4313      	orrs	r3, r2
 800140a:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 800140c:	6903      	ldr	r3, [r0, #16]
 800140e:	68f2      	ldr	r2, [r6, #12]
 8001410:	4319      	orrs	r1, r3
 8001412:	6943      	ldr	r3, [r0, #20]
 8001414:	4319      	orrs	r1, r3
 8001416:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 800141a:	f023 030c 	bic.w	r3, r3, #12
 800141e:	430b      	orrs	r3, r1
 8001420:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001422:	6973      	ldr	r3, [r6, #20]
 8001424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001428:	6983      	ldr	r3, [r0, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <UART_SetConfig+0x130>)
 8001430:	429e      	cmp	r6, r3
 8001432:	d131      	bne.n	8001498 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001434:	f7ff fd5c 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001438:	4360      	muls	r0, r4
 800143a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800143e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001442:	00bf      	lsls	r7, r7, #2
 8001444:	fbb0 f7f7 	udiv	r7, r0, r7
 8001448:	f7ff fd52 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 800144c:	4360      	muls	r0, r4
 800144e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8001452:	fbb7 f7f8 	udiv	r7, r7, r8
 8001456:	00ad      	lsls	r5, r5, #2
 8001458:	fbb0 f5f5 	udiv	r5, r0, r5
 800145c:	f7ff fd48 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001460:	4360      	muls	r0, r4
 8001462:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001466:	013f      	lsls	r7, r7, #4
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	fbb0 f0f3 	udiv	r0, r0, r3
 800146e:	fbb0 f0f8 	udiv	r0, r0, r8
 8001472:	fb08 5510 	mls	r5, r8, r0, r5
 8001476:	f7ff fd3b 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 800147a:	012d      	lsls	r5, r5, #4
 800147c:	3532      	adds	r5, #50	; 0x32
 800147e:	fbb5 f5f8 	udiv	r5, r5, r8
 8001482:	4360      	muls	r0, r4
 8001484:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001488:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800148c:	0089      	lsls	r1, r1, #2
 800148e:	fbb0 faf1 	udiv	sl, r0, r1
 8001492:	f7ff fd2d 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001496:	e030      	b.n	80014fa <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001498:	f7ff fd12 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 800149c:	4360      	muls	r0, r4
 800149e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80014a2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80014a6:	00bf      	lsls	r7, r7, #2
 80014a8:	fbb0 f7f7 	udiv	r7, r0, r7
 80014ac:	f7ff fd08 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 80014b0:	4360      	muls	r0, r4
 80014b2:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80014b6:	fbb7 f7f8 	udiv	r7, r7, r8
 80014ba:	00ad      	lsls	r5, r5, #2
 80014bc:	fbb0 f5f5 	udiv	r5, r0, r5
 80014c0:	f7ff fcfe 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 80014c4:	4360      	muls	r0, r4
 80014c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014ca:	013f      	lsls	r7, r7, #4
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80014d2:	fbb0 f0f8 	udiv	r0, r0, r8
 80014d6:	fb08 5510 	mls	r5, r8, r0, r5
 80014da:	f7ff fcf1 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 80014de:	012d      	lsls	r5, r5, #4
 80014e0:	3532      	adds	r5, #50	; 0x32
 80014e2:	fbb5 f5f8 	udiv	r5, r5, r8
 80014e6:	4360      	muls	r0, r4
 80014e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80014ec:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80014f0:	0089      	lsls	r1, r1, #2
 80014f2:	fbb0 faf1 	udiv	sl, r0, r1
 80014f6:	f7ff fce3 	bl	8000ec0 <HAL_RCC_GetPCLK1Freq>
 80014fa:	4344      	muls	r4, r0
 80014fc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8001500:	0080      	lsls	r0, r0, #2
 8001502:	fbb4 f0f0 	udiv	r0, r4, r0
 8001506:	fbb0 f0f8 	udiv	r0, r0, r8
 800150a:	fb08 a210 	mls	r2, r8, r0, sl
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	3232      	adds	r2, #50	; 0x32
 8001512:	fbb2 f3f8 	udiv	r3, r2, r8
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	442b      	add	r3, r5
 800151c:	441f      	add	r7, r3
 800151e:	60b7      	str	r7, [r6, #8]
 8001520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001524:	40013800 	.word	0x40013800

08001528 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001528:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800152a:	4604      	mov	r4, r0
 800152c:	b330      	cbz	r0, 800157c <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800152e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001532:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001536:	b91b      	cbnz	r3, 8001540 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001538:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800153c:	f000 fa88 	bl	8001a50 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001540:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 8001542:	2302      	movs	r3, #2
 8001544:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001548:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800154a:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800154c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001550:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001552:	f7ff ff4f 	bl	80013f4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001556:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001558:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001568:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001570:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 8001572:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001574:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001576:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800157a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800157c:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 800157e:	bd10      	pop	{r4, pc}

08001580 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001580:	4613      	mov	r3, r2
  uint32_t *tmp;
  uint32_t tmp_state = 0;

  tmp_state = huart->State;
 8001582:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001586:	b510      	push	{r4, lr}
  uint32_t *tmp;
  uint32_t tmp_state = 0;

  tmp_state = huart->State;
 8001588:	b2d2      	uxtb	r2, r2
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800158a:	2a01      	cmp	r2, #1
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800158c:	4604      	mov	r4, r0
  uint32_t *tmp;
  uint32_t tmp_state = 0;

  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800158e:	d001      	beq.n	8001594 <HAL_UART_Transmit_DMA+0x14>
 8001590:	2a22      	cmp	r2, #34	; 0x22
 8001592:	d12e      	bne.n	80015f2 <HAL_UART_Transmit_DMA+0x72>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001594:	b359      	cbz	r1, 80015ee <HAL_UART_Transmit_DMA+0x6e>
 8001596:	b353      	cbz	r3, 80015ee <HAL_UART_Transmit_DMA+0x6e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001598:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800159c:	2a01      	cmp	r2, #1
 800159e:	d028      	beq.n	80015f2 <HAL_UART_Transmit_DMA+0x72>
 80015a0:	2201      	movs	r2, #1
 80015a2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a6:	2200      	movs	r2, #0
 80015a8:	63e2      	str	r2, [r4, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80015aa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80015ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80015b0:	2a22      	cmp	r2, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80015b2:	bf0c      	ite	eq
 80015b4:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80015b6:	2212      	movne	r2, #18
 80015b8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_UART_Transmit_DMA+0x78>)

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 80015be:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80015c0:	84e3      	strh	r3, [r4, #38]	; 0x26
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
 80015c2:	6221      	str	r1, [r4, #32]
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80015c4:	6282      	str	r2, [r0, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_UART_Transmit_DMA+0x7c>)
 80015c8:	62c2      	str	r2, [r0, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_UART_Transmit_DMA+0x80>)
 80015cc:	6302      	str	r2, [r0, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	3204      	adds	r2, #4
 80015d2:	f7fe fede 	bl	8000392 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80015de:	695a      	ldr	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015e0:	2000      	movs	r0, #0
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80015e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e6:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015e8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

    return HAL_OK;
 80015ec:	bd10      	pop	{r4, pc}
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	bd10      	pop	{r4, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80015f2:	2002      	movs	r0, #2
  }
}
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	bf00      	nop
 80015f8:	08001607 	.word	0x08001607
 80015fc:	08001635 	.word	0x08001635
 8001600:	08001643 	.word	0x08001643

08001604 <HAL_UART_TxCpltCallback>:
 8001604:	4770      	bx	lr

08001606 <UART_DMATransmitCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8001606:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001608:	6803      	ldr	r3, [r0, #0]
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800160a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f013 0320 	ands.w	r3, r3, #32
 8001612:	d10a      	bne.n	800162a <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0;
 8001614:	84d3      	strh	r3, [r2, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001616:	6813      	ldr	r3, [r2, #0]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800161e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */    
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 800162a:	4610      	mov	r0, r2
 800162c:	f7ff ffea 	bl	8001604 <HAL_UART_TxCpltCallback>
 8001630:	bd08      	pop	{r3, pc}

08001632 <HAL_UART_TxHalfCpltCallback>:
 8001632:	4770      	bx	lr

08001634 <UART_DMATxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001634:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8001636:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001638:	f7ff fffb 	bl	8001632 <HAL_UART_TxHalfCpltCallback>
 800163c:	bd08      	pop	{r3, pc}

0800163e <HAL_UART_RxCpltCallback>:
 800163e:	4770      	bx	lr

08001640 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001640:	4770      	bx	lr

08001642 <UART_DMAError>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001642:	6a40      	ldr	r0, [r0, #36]	; 0x24
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001644:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 800164a:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 800164c:	2301      	movs	r3, #1
 800164e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001652:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800165a:	f7ff fff1 	bl	8001640 <HAL_UART_ErrorCallback>
 800165e:	bd08      	pop	{r3, pc}

08001660 <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001660:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001662:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001664:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001666:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001668:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800166a:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800166c:	d505      	bpl.n	800167a <HAL_UART_IRQHandler+0x1a>
 800166e:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001670:	bf42      	ittt	mi
 8001672:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8001674:	f043 0301 	orrmi.w	r3, r3, #1
 8001678:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800167a:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800167c:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800167e:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001680:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001684:	d504      	bpl.n	8001690 <HAL_UART_IRQHandler+0x30>
 8001686:	b11b      	cbz	r3, 8001690 <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001688:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800168a:	f041 0104 	orr.w	r1, r1, #4
 800168e:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8001690:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001692:	0749      	lsls	r1, r1, #29
 8001694:	d504      	bpl.n	80016a0 <HAL_UART_IRQHandler+0x40>
 8001696:	b11b      	cbz	r3, 80016a0 <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001698:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800169a:	f041 0102 	orr.w	r1, r1, #2
 800169e:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80016a0:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016a2:	0708      	lsls	r0, r1, #28
 80016a4:	d504      	bpl.n	80016b0 <HAL_UART_IRQHandler+0x50>
 80016a6:	b11b      	cbz	r3, 80016b0 <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80016a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80016b0:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80016b2:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80016b4:	0689      	lsls	r1, r1, #26
 80016b6:	d542      	bpl.n	800173e <HAL_UART_IRQHandler+0xde>
 80016b8:	0698      	lsls	r0, r3, #26
 80016ba:	d540      	bpl.n	800173e <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 80016bc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80016c0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80016c4:	2b22      	cmp	r3, #34	; 0x22
 80016c6:	d13a      	bne.n	800173e <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016c8:	68a3      	ldr	r3, [r4, #8]
 80016ca:	6921      	ldr	r1, [r4, #16]
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016d2:	d10b      	bne.n	80016ec <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016d4:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016d6:	b921      	cbnz	r1, 80016e2 <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016dc:	f823 2b02 	strh.w	r2, [r3], #2
 80016e0:	e002      	b.n	80016e8 <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 80016e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80016ea:	e00a      	b.n	8001702 <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016ec:	b919      	cbnz	r1, 80016f6 <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	62a1      	str	r1, [r4, #40]	; 0x28
 80016f2:	6852      	ldr	r2, [r2, #4]
 80016f4:	e004      	b.n	8001700 <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016f6:	6852      	ldr	r2, [r2, #4]
 80016f8:	1c59      	adds	r1, r3, #1
 80016fa:	62a1      	str	r1, [r4, #40]	; 0x28
 80016fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001700:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8001702:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001704:	3b01      	subs	r3, #1
 8001706:	b29b      	uxth	r3, r3
 8001708:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800170a:	b9c3      	cbnz	r3, 800173e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800170c:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 800170e:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	f022 0220 	bic.w	r2, r2, #32
 8001716:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001718:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800171c:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800171e:	bf17      	itett	ne
 8001720:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8001722:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001724:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8001728:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800172a:	bf1f      	itttt	ne
 800172c:	695a      	ldrne	r2, [r3, #20]
 800172e:	f022 0201 	bicne.w	r2, r2, #1
 8001732:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8001734:	2301      	movne	r3, #1
 8001736:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 800173a:	f7ff ff80 	bl	800163e <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001742:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001744:	0609      	lsls	r1, r1, #24
 8001746:	d528      	bpl.n	800179a <HAL_UART_IRQHandler+0x13a>
 8001748:	0610      	lsls	r0, r2, #24
 800174a:	d526      	bpl.n	800179a <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800174c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001750:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001754:	2a12      	cmp	r2, #18
 8001756:	d120      	bne.n	800179a <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001758:	68a2      	ldr	r2, [r4, #8]
 800175a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800175e:	6a22      	ldr	r2, [r4, #32]
 8001760:	d10a      	bne.n	8001778 <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001762:	8811      	ldrh	r1, [r2, #0]
 8001764:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001768:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800176a:	6921      	ldr	r1, [r4, #16]
 800176c:	b909      	cbnz	r1, 8001772 <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 800176e:	3202      	adds	r2, #2
 8001770:	e000      	b.n	8001774 <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8001772:	3201      	adds	r2, #1
 8001774:	6222      	str	r2, [r4, #32]
 8001776:	e003      	b.n	8001780 <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001778:	1c51      	adds	r1, r2, #1
 800177a:	6221      	str	r1, [r4, #32]
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 8001780:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001782:	3a01      	subs	r2, #1
 8001784:	b292      	uxth	r2, r2
 8001786:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001788:	b93a      	cbnz	r2, 800179a <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001790:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001798:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800179a:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800179c:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800179e:	0649      	lsls	r1, r1, #25
 80017a0:	d510      	bpl.n	80017c4 <HAL_UART_IRQHandler+0x164>
 80017a2:	0652      	lsls	r2, r2, #25
 80017a4:	d50e      	bpl.n	80017c4 <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017a6:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 80017a8:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ae:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80017b0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80017b4:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80017b6:	bf0c      	ite	eq
 80017b8:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 80017ba:	2301      	movne	r3, #1
 80017bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 80017c0:	f7ff ff20 	bl	8001604 <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017c6:	b15b      	cbz	r3, 80017e0 <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 80017c8:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 80017ca:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	9201      	str	r2, [sp, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 80017dc:	f7ff ff30 	bl	8001640 <HAL_UART_ErrorCallback>
  }  
}
 80017e0:	b002      	add	sp, #8
 80017e2:	bd10      	pop	{r4, pc}

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017e6:	e003      	b.n	80017f0 <LoopCopyDataInit>

080017e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017ee:	3104      	adds	r1, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017f0:	480a      	ldr	r0, [pc, #40]	; (800181c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017f8:	d3f6      	bcc.n	80017e8 <CopyDataInit>
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017fc:	e002      	b.n	8001804 <LoopFillZerobss>

080017fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001800:	f842 3b04 	str.w	r3, [r2], #4

08001804 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001806:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001808:	d3f9      	bcc.n	80017fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180a:	f7fe fccf 	bl	80001ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f000 f9cd 	bl	8001bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f000 f83d 	bl	8001890 <main>
  bx lr
 8001816:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001818:	08001c54 	.word	0x08001c54
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001820:	2000006c 	.word	0x2000006c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001824:	2000006c 	.word	0x2000006c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001828:	20000214 	.word	0x20000214

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>

0800182e <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800182e:	b508      	push	{r3, lr}
	BSP_LED_Toggle(LED2);
 8001830:	2000      	movs	r0, #0
 8001832:	f7fe fcb3 	bl	800019c <BSP_LED_Toggle>
 8001836:	e7fe      	b.n	8001836 <Error_Handler+0x8>

08001838 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800183c:	2214      	movs	r2, #20
 800183e:	2100      	movs	r1, #0
 8001840:	a801      	add	r0, sp, #4
 8001842:	f000 f9d9 	bl	8001bf8 <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 8001846:	2228      	movs	r2, #40	; 0x28
 8001848:	2100      	movs	r1, #0
 800184a:	a806      	add	r0, sp, #24
 800184c:	f000 f9d4 	bl	8001bf8 <memset>
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 8001850:	2301      	movs	r3, #1
 8001852:	930a      	str	r3, [sp, #40]	; 0x28
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001854:	2310      	movs	r3, #16
  
  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8001856:	2402      	movs	r4, #2
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001858:	930b      	str	r3, [sp, #44]	; 0x2c
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 800185a:	a806      	add	r0, sp, #24
  oscinitstruct.HSIState        = RCC_HSI_ON;
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 800185c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  
  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8001860:	9406      	str	r4, [sp, #24]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 8001862:	940d      	str	r4, [sp, #52]	; 0x34
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 8001864:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8001866:	f7fe ffcb 	bl	8000800 <HAL_RCC_OscConfig>
 800186a:	b100      	cbz	r0, 800186e <SystemClock_Config+0x36>
 800186c:	e7fe      	b.n	800186c <SystemClock_Config+0x34>
    while(1); 
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800186e:	230f      	movs	r3, #15
 8001870:	9301      	str	r3, [sp, #4]
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001872:	9003      	str	r0, [sp, #12]
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	9005      	str	r0, [sp, #20]
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001876:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 800187a:	4621      	mov	r1, r4
 800187c:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187e:	9402      	str	r4, [sp, #8]
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001880:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 8001882:	f7ff fa65 	bl	8000d50 <HAL_RCC_ClockConfig>
 8001886:	b100      	cbz	r0, 800188a <SystemClock_Config+0x52>
 8001888:	e7fe      	b.n	8001888 <SystemClock_Config+0x50>
  {
    /* Initialization Error */
    while(1); 
  }
}
 800188a:	b010      	add	sp, #64	; 0x40
 800188c:	bd10      	pop	{r4, pc}
	...

08001890 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
		 */
	HAL_Init();
 8001894:	f7fe fcc2 	bl	800021c <HAL_Init>

	/* Configure the system clock to 64 MHz */
	SystemClock_Config();
 8001898:	f7ff ffce 	bl	8001838 <SystemClock_Config>

	/* Configure LED2 */
	BSP_LED_Init(LED2);
 800189c:	2000      	movs	r0, #0
 800189e:	f7fe fc55 	bl	800014c <BSP_LED_Init>
	BSP_LED_Toggle(LED2);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7fe fc7a 	bl	800019c <BSP_LED_Toggle>
	2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	----------------------------------------------------------------------- */

	/* Compute the prescaler value to have TIMx counter clock equal to ___Hz */
	uwPrescalerValue = (uint32_t)(SystemCoreClock / 2000000) - 1;
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <main+0x134>)
 80018aa:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <main+0x138>)
 80018ac:	681b      	ldr	r3, [r3, #0]

	/* Set TIMx instance */
	TimHandle.Instance = TIMx;
 80018ae:	4c47      	ldr	r4, [pc, #284]	; (80019cc <main+0x13c>)
	2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	----------------------------------------------------------------------- */

	/* Compute the prescaler value to have TIMx counter clock equal to ___Hz */
	uwPrescalerValue = (uint32_t)(SystemCoreClock / 2000000) - 1;
 80018b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80018b4:	4a46      	ldr	r2, [pc, #280]	; (80019d0 <main+0x140>)
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6013      	str	r3, [r2, #0]

	/* Set TIMx instance */
	TimHandle.Instance = TIMx;
 80018ba:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <main+0x144>)
	 + Prescaler = (SystemCoreClock/2000000) - 1
	 + ClockDivision = 0
	 + Counter direction = Up
	*/
	TimHandle.Init.Period            = 665;
	TimHandle.Init.Prescaler         = uwPrescalerValue;
 80018bc:	6063      	str	r3, [r4, #4]

	/* Compute the prescaler value to have TIMx counter clock equal to ___Hz */
	uwPrescalerValue = (uint32_t)(SystemCoreClock / 2000000) - 1;

	/* Set TIMx instance */
	TimHandle.Instance = TIMx;
 80018be:	6022      	str	r2, [r4, #0]
	 + Period (ARR)   = (TIM3 counter clock / TIM3 output clock ) - 1
	 + Prescaler = (SystemCoreClock/2000000) - 1
	 + ClockDivision = 0
	 + Counter direction = Up
	*/
	TimHandle.Init.Period            = 665;
 80018c0:	f240 2299 	movw	r2, #665	; 0x299
	TimHandle.Init.Prescaler         = uwPrescalerValue;
	TimHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80018c4:	2300      	movs	r3, #0
	TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
	TimHandle.Init.RepetitionCounter = 0;

	if(HAL_TIM_PWM_Init(&TimHandle) != HAL_OK)	// il faut coder l'interface MSP
 80018c6:	4620      	mov	r0, r4
	 + Period (ARR)   = (TIM3 counter clock / TIM3 output clock ) - 1
	 + Prescaler = (SystemCoreClock/2000000) - 1
	 + ClockDivision = 0
	 + Counter direction = Up
	*/
	TimHandle.Init.Period            = 665;
 80018c8:	60e2      	str	r2, [r4, #12]
	TimHandle.Init.Prescaler         = uwPrescalerValue;
	TimHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80018ca:	6123      	str	r3, [r4, #16]
	TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80018cc:	60a3      	str	r3, [r4, #8]
	TimHandle.Init.RepetitionCounter = 0;
 80018ce:	6163      	str	r3, [r4, #20]

	if(HAL_TIM_PWM_Init(&TimHandle) != HAL_OK)	// il faut coder l'interface MSP
 80018d0:	f7ff fc78 	bl	80011c4 <HAL_TIM_PWM_Init>
 80018d4:	4602      	mov	r2, r0
 80018d6:	b108      	cbz	r0, 80018dc <main+0x4c>
	{
		Error_Handler();
 80018d8:	f7ff ffa9 	bl	800182e <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018dc:	493e      	ldr	r1, [pc, #248]	; (80019d8 <main+0x148>)
 80018de:	2360      	movs	r3, #96	; 0x60
 80018e0:	600b      	str	r3, [r1, #0]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	6088      	str	r0, [r1, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e4:	6108      	str	r0, [r1, #16]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e6:	60c8      	str	r0, [r1, #12]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e8:	6148      	str	r0, [r1, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ea:	6188      	str	r0, [r1, #24]
	sConfigOC.Pulse = 500;
 80018ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	if(HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f0:	4620      	mov	r0, r4
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	sConfigOC.Pulse = 500;
 80018f2:	604b      	str	r3, [r1, #4]

	if(HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f4:	f7ff fcf6 	bl	80012e4 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4601      	mov	r1, r0
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d1ec      	bne.n	80018d8 <main+0x48>
	{
		Error_Handler();
	}

	if(HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1) != HAL_OK)	// Bridge A V_enable
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff fd60 	bl	80013c4 <HAL_TIM_PWM_Start>
 8001904:	2800      	cmp	r0, #0
 8001906:	d1e7      	bne.n	80018d8 <main+0x48>
	/*##-1- Configure the TIM2 peripheral #######################################*/
	/* -----------------------------------------------------------------------
	* Rotary encoders counters
	*/
	// Set TIM2 instance //
	TimEncoderHandle.Instance = TIM2;
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <main+0x14c>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
	TimEncoderHandle.Init.Period = 20000;
 8001910:	f644 6220 	movw	r2, #20000	; 0x4e20
	TimEncoderHandle.Init.Prescaler = TIM_CLOCKPRESCALER_DIV1;
	TimEncoderHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
	TimEncoderHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	TimEncoderHandle.Init.RepetitionCounter = 0;

	sConfigEncoder.EncoderMode = TIM_ENCODERMODE_TI1;
 8001914:	4932      	ldr	r1, [pc, #200]	; (80019e0 <main+0x150>)
	/* -----------------------------------------------------------------------
	* Rotary encoders counters
	*/
	// Set TIM2 instance //
	TimEncoderHandle.Instance = TIM2;
	TimEncoderHandle.Init.Period = 20000;
 8001916:	60da      	str	r2, [r3, #12]
	TimEncoderHandle.Init.Prescaler = TIM_CLOCKPRESCALER_DIV1;
 8001918:	6058      	str	r0, [r3, #4]
	TimEncoderHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	6098      	str	r0, [r3, #8]
	TimEncoderHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	6118      	str	r0, [r3, #16]
	TimEncoderHandle.Init.RepetitionCounter = 0;
 800191e:	6158      	str	r0, [r3, #20]

	sConfigEncoder.EncoderMode = TIM_ENCODERMODE_TI1;
 8001920:	2501      	movs	r5, #1
	sConfigEncoder.IC1Filter = 8;
 8001922:	2208      	movs	r2, #8
	sConfigEncoder.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001924:	6048      	str	r0, [r1, #4]
	sConfigEncoder.IC1Prescaler = TIM_ICPSC_DIV1;
 8001926:	60c8      	str	r0, [r1, #12]
	sConfigEncoder.IC1Selection = TIM_ICSELECTION_DIRECTTI; 	// ???

	if(HAL_TIM_Encoder_Init(&TimEncoderHandle, &sConfigEncoder) != HAL_OK)	// il faut coder l'interface MSP
 8001928:	4618      	mov	r0, r3
	TimEncoderHandle.Init.Prescaler = TIM_CLOCKPRESCALER_DIV1;
	TimEncoderHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
	TimEncoderHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	TimEncoderHandle.Init.RepetitionCounter = 0;

	sConfigEncoder.EncoderMode = TIM_ENCODERMODE_TI1;
 800192a:	600d      	str	r5, [r1, #0]
	sConfigEncoder.IC1Filter = 8;
 800192c:	610a      	str	r2, [r1, #16]
	sConfigEncoder.IC1Polarity = TIM_ICPOLARITY_RISING;
	sConfigEncoder.IC1Prescaler = TIM_ICPSC_DIV1;
	sConfigEncoder.IC1Selection = TIM_ICSELECTION_DIRECTTI; 	// ???
 800192e:	608d      	str	r5, [r1, #8]

	if(HAL_TIM_Encoder_Init(&TimEncoderHandle, &sConfigEncoder) != HAL_OK)	// il faut coder l'interface MSP
 8001930:	f7ff fc62 	bl	80011f8 <HAL_TIM_Encoder_Init>
 8001934:	4606      	mov	r6, r0
 8001936:	2800      	cmp	r0, #0
 8001938:	d1ce      	bne.n	80018d8 <main+0x48>
	}


	/*************************** L298 functions *********************************/
	/****************************************************************************/
	L298_GPIOC_PORT();
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <main+0x154>)
	/* Bridge A inputs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	4c2a      	ldr	r4, [pc, #168]	; (80019e8 <main+0x158>)
	}


	/*************************** L298 functions *********************************/
	/****************************************************************************/
	L298_GPIOC_PORT();
 800193e:	699a      	ldr	r2, [r3, #24]
	/* Bridge A inputs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Pin = GPIO_PIN_6;								// PC6 for L298 C
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	4621      	mov	r1, r4
	}


	/*************************** L298 functions *********************************/
	/****************************************************************************/
	L298_GPIOC_PORT();
 8001942:	f042 0210 	orr.w	r2, r2, #16
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	699b      	ldr	r3, [r3, #24]
	/* Bridge A inputs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194a:	2703      	movs	r7, #3
	}


	/*************************** L298 functions *********************************/
	/****************************************************************************/
	L298_GPIOC_PORT();
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	9301      	str	r3, [sp, #4]
	/* Bridge A inputs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Pin = GPIO_PIN_6;								// PC6 for L298 C
 8001952:	f04f 0840 	mov.w	r8, #64	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	4825      	ldr	r0, [pc, #148]	; (80019ec <main+0x15c>)
	}


	/*************************** L298 functions *********************************/
	/****************************************************************************/
	L298_GPIOC_PORT();
 8001958:	9b01      	ldr	r3, [sp, #4]
	/* Bridge A inputs */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195c:	60a5      	str	r5, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195e:	60e7      	str	r7, [r4, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_6;								// PC6 for L298 C
 8001960:	f8c4 8000 	str.w	r8, [r4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f7fe fe6c 	bl	8000640 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001968:	462a      	mov	r2, r5
 800196a:	4641      	mov	r1, r8
 800196c:	481f      	ldr	r0, [pc, #124]	; (80019ec <main+0x15c>)
 800196e:	f7fe ff3f 	bl	80007f0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001974:	60a5      	str	r5, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Pin = GPIO_PIN_7;								// PC7 for L298 D
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	4621      	mov	r1, r4
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Pin = GPIO_PIN_7;								// PC7 for L298 D
 8001978:	2580      	movs	r5, #128	; 0x80
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	481c      	ldr	r0, [pc, #112]	; (80019ec <main+0x15c>)
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197c:	60e7      	str	r7, [r4, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_7;								// PC7 for L298 D
 800197e:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	f7fe fe5e 	bl	8000640 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001984:	4632      	mov	r2, r6
 8001986:	4819      	ldr	r0, [pc, #100]	; (80019ec <main+0x15c>)
 8001988:	4629      	mov	r1, r5
 800198a:	f7fe ff31 	bl	80007f0 <HAL_GPIO_WritePin>
				  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 800198e:	4c18      	ldr	r4, [pc, #96]	; (80019f0 <main+0x160>)

	UartHandle.Init.BaudRate     = 9600;
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <main+0x164>)
 8001992:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001996:	e884 000c 	stmia.w	r4, {r2, r3}
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_ODD;
 800199a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800199e:	6123      	str	r3, [r4, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80019a0:	4620      	mov	r0, r4
	UartHandle.Init.BaudRate     = 9600;
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_ODD;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80019a2:	230c      	movs	r3, #12
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;

	UartHandle.Init.BaudRate     = 9600;
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80019a4:	60a6      	str	r6, [r4, #8]
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80019a6:	60e6      	str	r6, [r4, #12]
	UartHandle.Init.Parity       = UART_PARITY_ODD;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80019a8:	61a6      	str	r6, [r4, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80019aa:	6163      	str	r3, [r4, #20]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80019ac:	f7ff fdbc 	bl	8001528 <HAL_UART_Init>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d191      	bne.n	80018d8 <main+0x48>
		Error_Handler();
	}

	/*##-2- Start the transmission process #####################################*/
	/* User start transmission data through "TxBuffer" buffer */
	if (HAL_UART_Transmit_DMA(&UartHandle, (uint8_t *)aTxBuffer, TXBUFFERSIZE) != HAL_OK)
 80019b4:	2261      	movs	r2, #97	; 0x61
 80019b6:	4910      	ldr	r1, [pc, #64]	; (80019f8 <main+0x168>)
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff fde1 	bl	8001580 <HAL_UART_Transmit_DMA>
 80019be:	2800      	cmp	r0, #0
 80019c0:	d18a      	bne.n	80018d8 <main+0x48>
 80019c2:	e7fe      	b.n	80019c2 <main+0x132>
 80019c4:	20000004 	.word	0x20000004
 80019c8:	001e8480 	.word	0x001e8480
 80019cc:	200001d8 	.word	0x200001d8
 80019d0:	2000008c 	.word	0x2000008c
 80019d4:	40000400 	.word	0x40000400
 80019d8:	200001b0 	.word	0x200001b0
 80019dc:	20000150 	.word	0x20000150
 80019e0:	2000018c 	.word	0x2000018c
 80019e4:	40021000 	.word	0x40021000
 80019e8:	20000090 	.word	0x20000090
 80019ec:	40011000 	.word	0x40011000
 80019f0:	20000110 	.word	0x20000110
 80019f4:	40013800 	.word	0x40013800
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_MspInit>:
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_TIM_PWM_MspInit>:
    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIMx_IRQn);
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef   GPIO_InitStruct;
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_TIM_PWM_MspInit+0x48>)
  /* Common configuration for all channels */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

  GPIO_InitStruct.Pin = TIMx_GPIO_PIN_CHANNEL1;
 8001a04:	a906      	add	r1, sp, #24
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
  GPIO_InitTypeDef   GPIO_InitStruct;
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8001a06:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

  GPIO_InitStruct.Pin = TIMx_GPIO_PIN_CHANNEL1;
  HAL_GPIO_Init(TIMx_GPIO_PORT_CHANNEL1, &GPIO_InitStruct);
 8001a08:	4810      	ldr	r0, [pc, #64]	; (8001a4c <HAL_TIM_PWM_MspInit+0x4c>)
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
  GPIO_InitTypeDef   GPIO_InitStruct;
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8001a0a:	f042 0202 	orr.w	r2, r2, #2
 8001a0e:	61da      	str	r2, [r3, #28]
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	f002 0202 	and.w	r2, r2, #2
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	9a00      	ldr	r2, [sp, #0]

  /* Enable all GPIO Channels Clock requested */
  TIMx_CHANNEL_GPIO_PORT();
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	f042 0204 	orr.w	r2, r2, #4
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	9b01      	ldr	r3, [sp, #4]

  /* Common configuration for all channels */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	9305      	str	r3, [sp, #20]

  GPIO_InitStruct.Pin = TIMx_GPIO_PIN_CHANNEL1;
 8001a38:	2340      	movs	r3, #64	; 0x40
 8001a3a:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(TIMx_GPIO_PORT_CHANNEL1, &GPIO_InitStruct);
 8001a3e:	f7fe fdff 	bl	8000640 <HAL_GPIO_Init>
}
 8001a42:	b007      	add	sp, #28
 8001a44:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010800 	.word	0x40010800

08001a50 <HAL_UART_MspInit>:

  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_UART_MspInit+0x100>)
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001a56:	699a      	ldr	r2, [r3, #24]
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001a58:	b088      	sub	sp, #32

  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001a5a:	f042 0204 	orr.w	r2, r2, #4
 8001a5e:	619a      	str	r2, [r3, #24]
 8001a60:	699a      	ldr	r2, [r3, #24]
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001a62:	4606      	mov	r6, r0

  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001a64:	f002 0204 	and.w	r2, r2, #4
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	9a00      	ldr	r2, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001a6c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a6e:	4d39      	ldr	r5, [pc, #228]	; (8001b54 <HAL_UART_MspInit+0x104>)
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	619a      	str	r2, [r3, #24]
 8001a76:	699a      	ldr	r2, [r3, #24]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001a78:	2701      	movs	r7, #1
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
 8001a7a:	f002 0204 	and.w	r2, r2, #4
 8001a7e:	9201      	str	r2, [sp, #4]
 8001a80:	9a01      	ldr	r2, [sp, #4]



  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001a82:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a84:	a904      	add	r1, sp, #16
  USARTx_RX_GPIO_CLK_ENABLE();



  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a8e:	4628      	mov	r0, r5
  USARTx_RX_GPIO_CLK_ENABLE();



  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001a90:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a94:	9202      	str	r2, [sp, #8]
 8001a96:	9a02      	ldr	r2, [sp, #8]

  /* Enable DMA clock */
  DMAx_CLK_ENABLE();
 8001a98:	695a      	ldr	r2, [r3, #20]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= USARTx_RX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8001a9a:	2400      	movs	r4, #0

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();

  /* Enable DMA clock */
  DMAx_CLK_ENABLE();
 8001a9c:	f042 0201 	orr.w	r2, r2, #1
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	695b      	ldr	r3, [r3, #20]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001aa4:	9706      	str	r7, [sp, #24]

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();

  /* Enable DMA clock */
  DMAx_CLK_ENABLE();
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	9303      	str	r3, [sp, #12]
 8001aac:	9b03      	ldr	r3, [sp, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	9307      	str	r3, [sp, #28]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001abc:	f7fe fdc0 	bl	8000640 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= USARTx_RX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001ac0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= USARTx_RX_PIN;
 8001ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001ac6:	4628      	mov	r0, r5

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8001ac8:	4d23      	ldr	r5, [pc, #140]	; (8001b58 <HAL_UART_MspInit+0x108>)
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= USARTx_RX_PIN;
 8001aca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8001acc:	9405      	str	r4, [sp, #20]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001ace:	f7fe fdb7 	bl	8000640 <HAL_GPIO_Init>

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001ad2:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <HAL_UART_MspInit+0x10c>)
 8001ad4:	2310      	movs	r3, #16
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001ad6:	f04f 0880 	mov.w	r8, #128	; 0x80
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

  HAL_DMA_Init(&hdma_tx);
 8001ada:	4628      	mov	r0, r5
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001adc:	e885 000c 	stmia.w	r5, {r2, r3}
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001ae0:	60ac      	str	r4, [r5, #8]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001ae2:	f8c5 800c 	str.w	r8, [r5, #12]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae6:	612c      	str	r4, [r5, #16]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001ae8:	616c      	str	r4, [r5, #20]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 8001aea:	61ac      	str	r4, [r5, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8001aec:	61ec      	str	r4, [r5, #28]

  HAL_DMA_Init(&hdma_tx);
 8001aee:	f7fe fc2b 	bl	8000348 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8001af2:	6335      	str	r5, [r6, #48]	; 0x30
 8001af4:	626e      	str	r6, [r5, #36]	; 0x24

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_CHANNEL;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_UART_MspInit+0x110>)
 8001af8:	4d1a      	ldr	r5, [pc, #104]	; (8001b64 <HAL_UART_MspInit+0x114>)
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001afa:	e885 0018 	stmia.w	r5, {r3, r4}
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

  HAL_DMA_Init(&hdma_rx);
 8001afe:	4628      	mov	r0, r5
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b04:	61eb      	str	r3, [r5, #28]
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_CHANNEL;
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001b06:	60ac      	str	r4, [r5, #8]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001b08:	f8c5 800c 	str.w	r8, [r5, #12]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0c:	612c      	str	r4, [r5, #16]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001b0e:	616c      	str	r4, [r5, #20]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8001b10:	61ac      	str	r4, [r5, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

  HAL_DMA_Init(&hdma_rx);
 8001b12:	f7fe fc19 	bl	8000348 <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8001b16:	463a      	mov	r2, r7
 8001b18:	4621      	mov	r1, r4
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

  HAL_DMA_Init(&hdma_rx);

  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8001b1a:	6375      	str	r5, [r6, #52]	; 0x34

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8001b1c:	200e      	movs	r0, #14
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

  HAL_DMA_Init(&hdma_rx);

  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8001b1e:	626e      	str	r6, [r5, #36]	; 0x24

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8001b20:	f7fe fbbc 	bl	800029c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8001b24:	200e      	movs	r0, #14
 8001b26:	f7fe fbed 	bl	8000304 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f7fe fbb4 	bl	800029c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8001b34:	200f      	movs	r0, #15
 8001b36:	f7fe fbe5 	bl	8000304 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8001b3a:	463a      	mov	r2, r7
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	2025      	movs	r0, #37	; 0x25
 8001b40:	f7fe fbac 	bl	800029c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001b44:	2025      	movs	r0, #37	; 0x25
 8001b46:	f7fe fbdd 	bl	8000304 <HAL_NVIC_EnableIRQ>
}
 8001b4a:	b008      	add	sp, #32
 8001b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	200000d8 	.word	0x200000d8
 8001b5c:	40020044 	.word	0x40020044
 8001b60:	40020058 	.word	0x40020058
 8001b64:	200000a0 	.word	0x200000a0

08001b68 <NMI_Handler>:
 8001b68:	4770      	bx	lr

08001b6a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler>

08001b6c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler>

08001b6e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler>

08001b70 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler>

08001b72 <SVC_Handler>:
 8001b72:	4770      	bx	lr

08001b74 <DebugMon_Handler>:
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8001b78:	f7fe bb62 	b.w	8000240 <HAL_IncTick>

08001b7c <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001b7c:	4801      	ldr	r0, [pc, #4]	; (8001b84 <TIM3_IRQHandler+0x8>)
 8001b7e:	f7ff ba4b 	b.w	8001018 <HAL_TIM_IRQHandler>
 8001b82:	bf00      	nop
 8001b84:	200001d8 	.word	0x200001d8

08001b88 <DMA1_Channel5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmarx);
 8001b88:	4b01      	ldr	r3, [pc, #4]	; (8001b90 <DMA1_Channel5_IRQHandler+0x8>)
 8001b8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001b8c:	f7fe bc2e 	b.w	80003ec <HAL_DMA_IRQHandler>
 8001b90:	20000110 	.word	0x20000110

08001b94 <DMA1_Channel4_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8001b94:	4b01      	ldr	r3, [pc, #4]	; (8001b9c <DMA1_Channel4_IRQHandler+0x8>)
 8001b96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b98:	f7fe bc28 	b.w	80003ec <HAL_DMA_IRQHandler>
 8001b9c:	20000110 	.word	0x20000110

08001ba0 <USART1_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&UartHandle);
 8001ba0:	4801      	ldr	r0, [pc, #4]	; (8001ba8 <USART1_IRQHandler+0x8>)
 8001ba2:	f7ff bd5d 	b.w	8001660 <HAL_UART_IRQHandler>
 8001ba6:	bf00      	nop
 8001ba8:	20000110 	.word	0x20000110

08001bac <__libc_init_array>:
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <__libc_init_array+0x3c>)
 8001bae:	b570      	push	{r4, r5, r6, lr}
 8001bb0:	461e      	mov	r6, r3
 8001bb2:	4c0e      	ldr	r4, [pc, #56]	; (8001bec <__libc_init_array+0x40>)
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	1ae4      	subs	r4, r4, r3
 8001bb8:	10a4      	asrs	r4, r4, #2
 8001bba:	42a5      	cmp	r5, r4
 8001bbc:	d004      	beq.n	8001bc8 <__libc_init_array+0x1c>
 8001bbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bc2:	4798      	blx	r3
 8001bc4:	3501      	adds	r5, #1
 8001bc6:	e7f8      	b.n	8001bba <__libc_init_array+0xe>
 8001bc8:	f000 f81e 	bl	8001c08 <_init>
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <__libc_init_array+0x44>)
 8001bce:	4c09      	ldr	r4, [pc, #36]	; (8001bf4 <__libc_init_array+0x48>)
 8001bd0:	461e      	mov	r6, r3
 8001bd2:	1ae4      	subs	r4, r4, r3
 8001bd4:	10a4      	asrs	r4, r4, #2
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	42a5      	cmp	r5, r4
 8001bda:	d004      	beq.n	8001be6 <__libc_init_array+0x3a>
 8001bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be0:	4798      	blx	r3
 8001be2:	3501      	adds	r5, #1
 8001be4:	e7f8      	b.n	8001bd8 <__libc_init_array+0x2c>
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	08001c4c 	.word	0x08001c4c
 8001bec:	08001c4c 	.word	0x08001c4c
 8001bf0:	08001c4c 	.word	0x08001c4c
 8001bf4:	08001c50 	.word	0x08001c50

08001bf8 <memset>:
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4402      	add	r2, r0
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d002      	beq.n	8001c06 <memset+0xe>
 8001c00:	f803 1b01 	strb.w	r1, [r3], #1
 8001c04:	e7fa      	b.n	8001bfc <memset+0x4>
 8001c06:	4770      	bx	lr

08001c08 <_init>:
 8001c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0a:	bf00      	nop
 8001c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0e:	bc08      	pop	{r3}
 8001c10:	469e      	mov	lr, r3
 8001c12:	4770      	bx	lr

08001c14 <_fini>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	bf00      	nop
 8001c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1a:	bc08      	pop	{r3}
 8001c1c:	469e      	mov	lr, r3
 8001c1e:	4770      	bx	lr
